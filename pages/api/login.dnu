import prisma from '../../lib/prisma';

export default async function handler(req, res) {
    if (req.method === 'POST') {
        const { username } = req.body;

        // Validate the input
        if (!username || typeof username !== 'string') {
            return res.status(400).json({ message: 'A valid username is required' });
        }

        try {
            // Check if the user exists
            let user = await prisma.users.findUnique({
                where: { username },
            });

            if (!user) {
                // Create a new user if not found
                user = await prisma.users.create({
                    data: { username },
                });
            }

            // Return success if the user exists or was created
            return res.status(200).json({ message: 'Login successful', user });
        } catch (error) {
            console.error('Error during login:', error);

            // Allow the user to pass through even if the API fails
            return res.status(200).json({
                message: 'Login successful (fallback mode)',
                user: { username, fallback: true },
            });
        }
    }

    // Handle unsupported HTTP methods
    res.setHeader('Allow', ['POST']);
    return res.status(405).json({ message: `Method ${req.method} not allowed` });
}
