
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model users
 * 
 */
export type users = $Result.DefaultSelection<Prisma.$usersPayload>
/**
 * Model waypoints
 * 
 */
export type waypoints = $Result.DefaultSelection<Prisma.$waypointsPayload>
/**
 * Model lines
 * 
 */
export type lines = $Result.DefaultSelection<Prisma.$linesPayload>
/**
 * Model shapes
 * 
 */
export type shapes = $Result.DefaultSelection<Prisma.$shapesPayload>

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.users.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.users.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.users`: Exposes CRUD operations for the **users** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.users.findMany()
    * ```
    */
  get users(): Prisma.usersDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.waypoints`: Exposes CRUD operations for the **waypoints** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Waypoints
    * const waypoints = await prisma.waypoints.findMany()
    * ```
    */
  get waypoints(): Prisma.waypointsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.lines`: Exposes CRUD operations for the **lines** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Lines
    * const lines = await prisma.lines.findMany()
    * ```
    */
  get lines(): Prisma.linesDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.shapes`: Exposes CRUD operations for the **shapes** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Shapes
    * const shapes = await prisma.shapes.findMany()
    * ```
    */
  get shapes(): Prisma.shapesDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.6.0
   * Query Engine version: f676762280b54cd07c770017ed3711ddde35f37a
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    users: 'users',
    waypoints: 'waypoints',
    lines: 'lines',
    shapes: 'shapes'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "users" | "waypoints" | "lines" | "shapes"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      users: {
        payload: Prisma.$usersPayload<ExtArgs>
        fields: Prisma.usersFieldRefs
        operations: {
          findUnique: {
            args: Prisma.usersFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.usersFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          findFirst: {
            args: Prisma.usersFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.usersFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          findMany: {
            args: Prisma.usersFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>[]
          }
          create: {
            args: Prisma.usersCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          createMany: {
            args: Prisma.usersCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.usersCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>[]
          }
          delete: {
            args: Prisma.usersDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          update: {
            args: Prisma.usersUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          deleteMany: {
            args: Prisma.usersDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.usersUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.usersUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>[]
          }
          upsert: {
            args: Prisma.usersUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          aggregate: {
            args: Prisma.UsersAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUsers>
          }
          groupBy: {
            args: Prisma.usersGroupByArgs<ExtArgs>
            result: $Utils.Optional<UsersGroupByOutputType>[]
          }
          count: {
            args: Prisma.usersCountArgs<ExtArgs>
            result: $Utils.Optional<UsersCountAggregateOutputType> | number
          }
        }
      }
      waypoints: {
        payload: Prisma.$waypointsPayload<ExtArgs>
        fields: Prisma.waypointsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.waypointsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$waypointsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.waypointsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$waypointsPayload>
          }
          findFirst: {
            args: Prisma.waypointsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$waypointsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.waypointsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$waypointsPayload>
          }
          findMany: {
            args: Prisma.waypointsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$waypointsPayload>[]
          }
          create: {
            args: Prisma.waypointsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$waypointsPayload>
          }
          createMany: {
            args: Prisma.waypointsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.waypointsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$waypointsPayload>[]
          }
          delete: {
            args: Prisma.waypointsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$waypointsPayload>
          }
          update: {
            args: Prisma.waypointsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$waypointsPayload>
          }
          deleteMany: {
            args: Prisma.waypointsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.waypointsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.waypointsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$waypointsPayload>[]
          }
          upsert: {
            args: Prisma.waypointsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$waypointsPayload>
          }
          aggregate: {
            args: Prisma.WaypointsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateWaypoints>
          }
          groupBy: {
            args: Prisma.waypointsGroupByArgs<ExtArgs>
            result: $Utils.Optional<WaypointsGroupByOutputType>[]
          }
          count: {
            args: Prisma.waypointsCountArgs<ExtArgs>
            result: $Utils.Optional<WaypointsCountAggregateOutputType> | number
          }
        }
      }
      lines: {
        payload: Prisma.$linesPayload<ExtArgs>
        fields: Prisma.linesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.linesFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$linesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.linesFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$linesPayload>
          }
          findFirst: {
            args: Prisma.linesFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$linesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.linesFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$linesPayload>
          }
          findMany: {
            args: Prisma.linesFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$linesPayload>[]
          }
          create: {
            args: Prisma.linesCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$linesPayload>
          }
          createMany: {
            args: Prisma.linesCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.linesCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$linesPayload>[]
          }
          delete: {
            args: Prisma.linesDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$linesPayload>
          }
          update: {
            args: Prisma.linesUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$linesPayload>
          }
          deleteMany: {
            args: Prisma.linesDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.linesUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.linesUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$linesPayload>[]
          }
          upsert: {
            args: Prisma.linesUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$linesPayload>
          }
          aggregate: {
            args: Prisma.LinesAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLines>
          }
          groupBy: {
            args: Prisma.linesGroupByArgs<ExtArgs>
            result: $Utils.Optional<LinesGroupByOutputType>[]
          }
          count: {
            args: Prisma.linesCountArgs<ExtArgs>
            result: $Utils.Optional<LinesCountAggregateOutputType> | number
          }
        }
      }
      shapes: {
        payload: Prisma.$shapesPayload<ExtArgs>
        fields: Prisma.shapesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.shapesFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$shapesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.shapesFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$shapesPayload>
          }
          findFirst: {
            args: Prisma.shapesFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$shapesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.shapesFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$shapesPayload>
          }
          findMany: {
            args: Prisma.shapesFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$shapesPayload>[]
          }
          create: {
            args: Prisma.shapesCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$shapesPayload>
          }
          createMany: {
            args: Prisma.shapesCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.shapesCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$shapesPayload>[]
          }
          delete: {
            args: Prisma.shapesDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$shapesPayload>
          }
          update: {
            args: Prisma.shapesUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$shapesPayload>
          }
          deleteMany: {
            args: Prisma.shapesDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.shapesUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.shapesUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$shapesPayload>[]
          }
          upsert: {
            args: Prisma.shapesUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$shapesPayload>
          }
          aggregate: {
            args: Prisma.ShapesAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateShapes>
          }
          groupBy: {
            args: Prisma.shapesGroupByArgs<ExtArgs>
            result: $Utils.Optional<ShapesGroupByOutputType>[]
          }
          count: {
            args: Prisma.shapesCountArgs<ExtArgs>
            result: $Utils.Optional<ShapesCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    users?: usersOmit
    waypoints?: waypointsOmit
    lines?: linesOmit
    shapes?: shapesOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UsersCountOutputType
   */

  export type UsersCountOutputType = {
    lines: number
    shapes: number
    waypoints: number
  }

  export type UsersCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    lines?: boolean | UsersCountOutputTypeCountLinesArgs
    shapes?: boolean | UsersCountOutputTypeCountShapesArgs
    waypoints?: boolean | UsersCountOutputTypeCountWaypointsArgs
  }

  // Custom InputTypes
  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsersCountOutputType
     */
    select?: UsersCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountLinesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: linesWhereInput
  }

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountShapesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: shapesWhereInput
  }

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountWaypointsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: waypointsWhereInput
  }


  /**
   * Models
   */

  /**
   * Model users
   */

  export type AggregateUsers = {
    _count: UsersCountAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  export type UsersMinAggregateOutputType = {
    id: string | null
    username: string | null
    created_at: Date | null
  }

  export type UsersMaxAggregateOutputType = {
    id: string | null
    username: string | null
    created_at: Date | null
  }

  export type UsersCountAggregateOutputType = {
    id: number
    username: number
    created_at: number
    _all: number
  }


  export type UsersMinAggregateInputType = {
    id?: true
    username?: true
    created_at?: true
  }

  export type UsersMaxAggregateInputType = {
    id?: true
    username?: true
    created_at?: true
  }

  export type UsersCountAggregateInputType = {
    id?: true
    username?: true
    created_at?: true
    _all?: true
  }

  export type UsersAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which users to aggregate.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: usersOrderByWithRelationInput | usersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned users
    **/
    _count?: true | UsersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsersMaxAggregateInputType
  }

  export type GetUsersAggregateType<T extends UsersAggregateArgs> = {
        [P in keyof T & keyof AggregateUsers]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsers[P]>
      : GetScalarType<T[P], AggregateUsers[P]>
  }




  export type usersGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: usersWhereInput
    orderBy?: usersOrderByWithAggregationInput | usersOrderByWithAggregationInput[]
    by: UsersScalarFieldEnum[] | UsersScalarFieldEnum
    having?: usersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsersCountAggregateInputType | true
    _min?: UsersMinAggregateInputType
    _max?: UsersMaxAggregateInputType
  }

  export type UsersGroupByOutputType = {
    id: string
    username: string
    created_at: Date | null
    _count: UsersCountAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  type GetUsersGroupByPayload<T extends usersGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UsersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsersGroupByOutputType[P]>
            : GetScalarType<T[P], UsersGroupByOutputType[P]>
        }
      >
    >


  export type usersSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    username?: boolean
    created_at?: boolean
    lines?: boolean | users$linesArgs<ExtArgs>
    shapes?: boolean | users$shapesArgs<ExtArgs>
    waypoints?: boolean | users$waypointsArgs<ExtArgs>
    _count?: boolean | UsersCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["users"]>

  export type usersSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    username?: boolean
    created_at?: boolean
  }, ExtArgs["result"]["users"]>

  export type usersSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    username?: boolean
    created_at?: boolean
  }, ExtArgs["result"]["users"]>

  export type usersSelectScalar = {
    id?: boolean
    username?: boolean
    created_at?: boolean
  }

  export type usersOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "username" | "created_at", ExtArgs["result"]["users"]>
  export type usersInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    lines?: boolean | users$linesArgs<ExtArgs>
    shapes?: boolean | users$shapesArgs<ExtArgs>
    waypoints?: boolean | users$waypointsArgs<ExtArgs>
    _count?: boolean | UsersCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type usersIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type usersIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $usersPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "users"
    objects: {
      lines: Prisma.$linesPayload<ExtArgs>[]
      shapes: Prisma.$shapesPayload<ExtArgs>[]
      waypoints: Prisma.$waypointsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      username: string
      created_at: Date | null
    }, ExtArgs["result"]["users"]>
    composites: {}
  }

  type usersGetPayload<S extends boolean | null | undefined | usersDefaultArgs> = $Result.GetResult<Prisma.$usersPayload, S>

  type usersCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<usersFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UsersCountAggregateInputType | true
    }

  export interface usersDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['users'], meta: { name: 'users' } }
    /**
     * Find zero or one Users that matches the filter.
     * @param {usersFindUniqueArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends usersFindUniqueArgs>(args: SelectSubset<T, usersFindUniqueArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Users that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {usersFindUniqueOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends usersFindUniqueOrThrowArgs>(args: SelectSubset<T, usersFindUniqueOrThrowArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindFirstArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends usersFindFirstArgs>(args?: SelectSubset<T, usersFindFirstArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Users that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindFirstOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends usersFindFirstOrThrowArgs>(args?: SelectSubset<T, usersFindFirstOrThrowArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.users.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.users.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const usersWithIdOnly = await prisma.users.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends usersFindManyArgs>(args?: SelectSubset<T, usersFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Users.
     * @param {usersCreateArgs} args - Arguments to create a Users.
     * @example
     * // Create one Users
     * const Users = await prisma.users.create({
     *   data: {
     *     // ... data to create a Users
     *   }
     * })
     * 
     */
    create<T extends usersCreateArgs>(args: SelectSubset<T, usersCreateArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {usersCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const users = await prisma.users.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends usersCreateManyArgs>(args?: SelectSubset<T, usersCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {usersCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const users = await prisma.users.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const usersWithIdOnly = await prisma.users.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends usersCreateManyAndReturnArgs>(args?: SelectSubset<T, usersCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Users.
     * @param {usersDeleteArgs} args - Arguments to delete one Users.
     * @example
     * // Delete one Users
     * const Users = await prisma.users.delete({
     *   where: {
     *     // ... filter to delete one Users
     *   }
     * })
     * 
     */
    delete<T extends usersDeleteArgs>(args: SelectSubset<T, usersDeleteArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Users.
     * @param {usersUpdateArgs} args - Arguments to update one Users.
     * @example
     * // Update one Users
     * const users = await prisma.users.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends usersUpdateArgs>(args: SelectSubset<T, usersUpdateArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {usersDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.users.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends usersDeleteManyArgs>(args?: SelectSubset<T, usersDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const users = await prisma.users.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends usersUpdateManyArgs>(args: SelectSubset<T, usersUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {usersUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const users = await prisma.users.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const usersWithIdOnly = await prisma.users.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends usersUpdateManyAndReturnArgs>(args: SelectSubset<T, usersUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Users.
     * @param {usersUpsertArgs} args - Arguments to update or create a Users.
     * @example
     * // Update or create a Users
     * const users = await prisma.users.upsert({
     *   create: {
     *     // ... data to create a Users
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Users we want to update
     *   }
     * })
     */
    upsert<T extends usersUpsertArgs>(args: SelectSubset<T, usersUpsertArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.users.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends usersCountArgs>(
      args?: Subset<T, usersCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsersAggregateArgs>(args: Subset<T, UsersAggregateArgs>): Prisma.PrismaPromise<GetUsersAggregateType<T>>

    /**
     * Group by Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends usersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: usersGroupByArgs['orderBy'] }
        : { orderBy?: usersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, usersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the users model
   */
  readonly fields: usersFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for users.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__usersClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    lines<T extends users$linesArgs<ExtArgs> = {}>(args?: Subset<T, users$linesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$linesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    shapes<T extends users$shapesArgs<ExtArgs> = {}>(args?: Subset<T, users$shapesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$shapesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    waypoints<T extends users$waypointsArgs<ExtArgs> = {}>(args?: Subset<T, users$waypointsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$waypointsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the users model
   */
  interface usersFieldRefs {
    readonly id: FieldRef<"users", 'String'>
    readonly username: FieldRef<"users", 'String'>
    readonly created_at: FieldRef<"users", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * users findUnique
   */
  export type usersFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where: usersWhereUniqueInput
  }

  /**
   * users findUniqueOrThrow
   */
  export type usersFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where: usersWhereUniqueInput
  }

  /**
   * users findFirst
   */
  export type usersFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: usersOrderByWithRelationInput | usersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     */
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }

  /**
   * users findFirstOrThrow
   */
  export type usersFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: usersOrderByWithRelationInput | usersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     */
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }

  /**
   * users findMany
   */
  export type usersFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: usersOrderByWithRelationInput | usersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing users.
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }

  /**
   * users create
   */
  export type usersCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * The data needed to create a users.
     */
    data: XOR<usersCreateInput, usersUncheckedCreateInput>
  }

  /**
   * users createMany
   */
  export type usersCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many users.
     */
    data: usersCreateManyInput | usersCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * users createManyAndReturn
   */
  export type usersCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * The data used to create many users.
     */
    data: usersCreateManyInput | usersCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * users update
   */
  export type usersUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * The data needed to update a users.
     */
    data: XOR<usersUpdateInput, usersUncheckedUpdateInput>
    /**
     * Choose, which users to update.
     */
    where: usersWhereUniqueInput
  }

  /**
   * users updateMany
   */
  export type usersUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update users.
     */
    data: XOR<usersUpdateManyMutationInput, usersUncheckedUpdateManyInput>
    /**
     * Filter which users to update
     */
    where?: usersWhereInput
    /**
     * Limit how many users to update.
     */
    limit?: number
  }

  /**
   * users updateManyAndReturn
   */
  export type usersUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * The data used to update users.
     */
    data: XOR<usersUpdateManyMutationInput, usersUncheckedUpdateManyInput>
    /**
     * Filter which users to update
     */
    where?: usersWhereInput
    /**
     * Limit how many users to update.
     */
    limit?: number
  }

  /**
   * users upsert
   */
  export type usersUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * The filter to search for the users to update in case it exists.
     */
    where: usersWhereUniqueInput
    /**
     * In case the users found by the `where` argument doesn't exist, create a new users with this data.
     */
    create: XOR<usersCreateInput, usersUncheckedCreateInput>
    /**
     * In case the users was found with the provided `where` argument, update it with this data.
     */
    update: XOR<usersUpdateInput, usersUncheckedUpdateInput>
  }

  /**
   * users delete
   */
  export type usersDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter which users to delete.
     */
    where: usersWhereUniqueInput
  }

  /**
   * users deleteMany
   */
  export type usersDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which users to delete
     */
    where?: usersWhereInput
    /**
     * Limit how many users to delete.
     */
    limit?: number
  }

  /**
   * users.lines
   */
  export type users$linesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the lines
     */
    select?: linesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the lines
     */
    omit?: linesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: linesInclude<ExtArgs> | null
    where?: linesWhereInput
    orderBy?: linesOrderByWithRelationInput | linesOrderByWithRelationInput[]
    cursor?: linesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LinesScalarFieldEnum | LinesScalarFieldEnum[]
  }

  /**
   * users.shapes
   */
  export type users$shapesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the shapes
     */
    select?: shapesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the shapes
     */
    omit?: shapesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: shapesInclude<ExtArgs> | null
    where?: shapesWhereInput
    orderBy?: shapesOrderByWithRelationInput | shapesOrderByWithRelationInput[]
    cursor?: shapesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ShapesScalarFieldEnum | ShapesScalarFieldEnum[]
  }

  /**
   * users.waypoints
   */
  export type users$waypointsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the waypoints
     */
    select?: waypointsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the waypoints
     */
    omit?: waypointsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: waypointsInclude<ExtArgs> | null
    where?: waypointsWhereInput
    orderBy?: waypointsOrderByWithRelationInput | waypointsOrderByWithRelationInput[]
    cursor?: waypointsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WaypointsScalarFieldEnum | WaypointsScalarFieldEnum[]
  }

  /**
   * users without action
   */
  export type usersDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
  }


  /**
   * Model waypoints
   */

  export type AggregateWaypoints = {
    _count: WaypointsCountAggregateOutputType | null
    _avg: WaypointsAvgAggregateOutputType | null
    _sum: WaypointsSumAggregateOutputType | null
    _min: WaypointsMinAggregateOutputType | null
    _max: WaypointsMaxAggregateOutputType | null
  }

  export type WaypointsAvgAggregateOutputType = {
    id: number | null
  }

  export type WaypointsSumAggregateOutputType = {
    id: number | null
  }

  export type WaypointsMinAggregateOutputType = {
    id: number | null
    user_id: string | null
    name: string | null
    description: string | null
    created_at: Date | null
  }

  export type WaypointsMaxAggregateOutputType = {
    id: number | null
    user_id: string | null
    name: string | null
    description: string | null
    created_at: Date | null
  }

  export type WaypointsCountAggregateOutputType = {
    id: number
    user_id: number
    name: number
    description: number
    created_at: number
    _all: number
  }


  export type WaypointsAvgAggregateInputType = {
    id?: true
  }

  export type WaypointsSumAggregateInputType = {
    id?: true
  }

  export type WaypointsMinAggregateInputType = {
    id?: true
    user_id?: true
    name?: true
    description?: true
    created_at?: true
  }

  export type WaypointsMaxAggregateInputType = {
    id?: true
    user_id?: true
    name?: true
    description?: true
    created_at?: true
  }

  export type WaypointsCountAggregateInputType = {
    id?: true
    user_id?: true
    name?: true
    description?: true
    created_at?: true
    _all?: true
  }

  export type WaypointsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which waypoints to aggregate.
     */
    where?: waypointsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of waypoints to fetch.
     */
    orderBy?: waypointsOrderByWithRelationInput | waypointsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: waypointsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` waypoints from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` waypoints.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned waypoints
    **/
    _count?: true | WaypointsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: WaypointsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: WaypointsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WaypointsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WaypointsMaxAggregateInputType
  }

  export type GetWaypointsAggregateType<T extends WaypointsAggregateArgs> = {
        [P in keyof T & keyof AggregateWaypoints]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWaypoints[P]>
      : GetScalarType<T[P], AggregateWaypoints[P]>
  }




  export type waypointsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: waypointsWhereInput
    orderBy?: waypointsOrderByWithAggregationInput | waypointsOrderByWithAggregationInput[]
    by: WaypointsScalarFieldEnum[] | WaypointsScalarFieldEnum
    having?: waypointsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WaypointsCountAggregateInputType | true
    _avg?: WaypointsAvgAggregateInputType
    _sum?: WaypointsSumAggregateInputType
    _min?: WaypointsMinAggregateInputType
    _max?: WaypointsMaxAggregateInputType
  }

  export type WaypointsGroupByOutputType = {
    id: number
    user_id: string
    name: string | null
    description: string | null
    created_at: Date | null
    _count: WaypointsCountAggregateOutputType | null
    _avg: WaypointsAvgAggregateOutputType | null
    _sum: WaypointsSumAggregateOutputType | null
    _min: WaypointsMinAggregateOutputType | null
    _max: WaypointsMaxAggregateOutputType | null
  }

  type GetWaypointsGroupByPayload<T extends waypointsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WaypointsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WaypointsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WaypointsGroupByOutputType[P]>
            : GetScalarType<T[P], WaypointsGroupByOutputType[P]>
        }
      >
    >


  export type waypointsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    name?: boolean
    description?: boolean
    created_at?: boolean
    users?: boolean | usersDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["waypoints"]>

  export type waypointsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    name?: boolean
    description?: boolean
    created_at?: boolean
    users?: boolean | usersDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["waypoints"]>

  export type waypointsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    name?: boolean
    description?: boolean
    created_at?: boolean
    users?: boolean | usersDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["waypoints"]>

  export type waypointsSelectScalar = {
    id?: boolean
    user_id?: boolean
    name?: boolean
    description?: boolean
    created_at?: boolean
  }

  export type waypointsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "user_id" | "name" | "description" | "created_at", ExtArgs["result"]["waypoints"]>
  export type waypointsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | usersDefaultArgs<ExtArgs>
  }
  export type waypointsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | usersDefaultArgs<ExtArgs>
  }
  export type waypointsIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | usersDefaultArgs<ExtArgs>
  }

  export type $waypointsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "waypoints"
    objects: {
      users: Prisma.$usersPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      user_id: string
      name: string | null
      description: string | null
      created_at: Date | null
    }, ExtArgs["result"]["waypoints"]>
    composites: {}
  }

  type waypointsGetPayload<S extends boolean | null | undefined | waypointsDefaultArgs> = $Result.GetResult<Prisma.$waypointsPayload, S>

  type waypointsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<waypointsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: WaypointsCountAggregateInputType | true
    }

  export interface waypointsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['waypoints'], meta: { name: 'waypoints' } }
    /**
     * Find zero or one Waypoints that matches the filter.
     * @param {waypointsFindUniqueArgs} args - Arguments to find a Waypoints
     * @example
     * // Get one Waypoints
     * const waypoints = await prisma.waypoints.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends waypointsFindUniqueArgs>(args: SelectSubset<T, waypointsFindUniqueArgs<ExtArgs>>): Prisma__waypointsClient<$Result.GetResult<Prisma.$waypointsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Waypoints that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {waypointsFindUniqueOrThrowArgs} args - Arguments to find a Waypoints
     * @example
     * // Get one Waypoints
     * const waypoints = await prisma.waypoints.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends waypointsFindUniqueOrThrowArgs>(args: SelectSubset<T, waypointsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__waypointsClient<$Result.GetResult<Prisma.$waypointsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Waypoints that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {waypointsFindFirstArgs} args - Arguments to find a Waypoints
     * @example
     * // Get one Waypoints
     * const waypoints = await prisma.waypoints.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends waypointsFindFirstArgs>(args?: SelectSubset<T, waypointsFindFirstArgs<ExtArgs>>): Prisma__waypointsClient<$Result.GetResult<Prisma.$waypointsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Waypoints that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {waypointsFindFirstOrThrowArgs} args - Arguments to find a Waypoints
     * @example
     * // Get one Waypoints
     * const waypoints = await prisma.waypoints.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends waypointsFindFirstOrThrowArgs>(args?: SelectSubset<T, waypointsFindFirstOrThrowArgs<ExtArgs>>): Prisma__waypointsClient<$Result.GetResult<Prisma.$waypointsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Waypoints that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {waypointsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Waypoints
     * const waypoints = await prisma.waypoints.findMany()
     * 
     * // Get first 10 Waypoints
     * const waypoints = await prisma.waypoints.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const waypointsWithIdOnly = await prisma.waypoints.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends waypointsFindManyArgs>(args?: SelectSubset<T, waypointsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$waypointsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Waypoints.
     * @param {waypointsCreateArgs} args - Arguments to create a Waypoints.
     * @example
     * // Create one Waypoints
     * const Waypoints = await prisma.waypoints.create({
     *   data: {
     *     // ... data to create a Waypoints
     *   }
     * })
     * 
     */
    create<T extends waypointsCreateArgs>(args: SelectSubset<T, waypointsCreateArgs<ExtArgs>>): Prisma__waypointsClient<$Result.GetResult<Prisma.$waypointsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Waypoints.
     * @param {waypointsCreateManyArgs} args - Arguments to create many Waypoints.
     * @example
     * // Create many Waypoints
     * const waypoints = await prisma.waypoints.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends waypointsCreateManyArgs>(args?: SelectSubset<T, waypointsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Waypoints and returns the data saved in the database.
     * @param {waypointsCreateManyAndReturnArgs} args - Arguments to create many Waypoints.
     * @example
     * // Create many Waypoints
     * const waypoints = await prisma.waypoints.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Waypoints and only return the `id`
     * const waypointsWithIdOnly = await prisma.waypoints.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends waypointsCreateManyAndReturnArgs>(args?: SelectSubset<T, waypointsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$waypointsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Waypoints.
     * @param {waypointsDeleteArgs} args - Arguments to delete one Waypoints.
     * @example
     * // Delete one Waypoints
     * const Waypoints = await prisma.waypoints.delete({
     *   where: {
     *     // ... filter to delete one Waypoints
     *   }
     * })
     * 
     */
    delete<T extends waypointsDeleteArgs>(args: SelectSubset<T, waypointsDeleteArgs<ExtArgs>>): Prisma__waypointsClient<$Result.GetResult<Prisma.$waypointsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Waypoints.
     * @param {waypointsUpdateArgs} args - Arguments to update one Waypoints.
     * @example
     * // Update one Waypoints
     * const waypoints = await prisma.waypoints.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends waypointsUpdateArgs>(args: SelectSubset<T, waypointsUpdateArgs<ExtArgs>>): Prisma__waypointsClient<$Result.GetResult<Prisma.$waypointsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Waypoints.
     * @param {waypointsDeleteManyArgs} args - Arguments to filter Waypoints to delete.
     * @example
     * // Delete a few Waypoints
     * const { count } = await prisma.waypoints.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends waypointsDeleteManyArgs>(args?: SelectSubset<T, waypointsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Waypoints.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {waypointsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Waypoints
     * const waypoints = await prisma.waypoints.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends waypointsUpdateManyArgs>(args: SelectSubset<T, waypointsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Waypoints and returns the data updated in the database.
     * @param {waypointsUpdateManyAndReturnArgs} args - Arguments to update many Waypoints.
     * @example
     * // Update many Waypoints
     * const waypoints = await prisma.waypoints.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Waypoints and only return the `id`
     * const waypointsWithIdOnly = await prisma.waypoints.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends waypointsUpdateManyAndReturnArgs>(args: SelectSubset<T, waypointsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$waypointsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Waypoints.
     * @param {waypointsUpsertArgs} args - Arguments to update or create a Waypoints.
     * @example
     * // Update or create a Waypoints
     * const waypoints = await prisma.waypoints.upsert({
     *   create: {
     *     // ... data to create a Waypoints
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Waypoints we want to update
     *   }
     * })
     */
    upsert<T extends waypointsUpsertArgs>(args: SelectSubset<T, waypointsUpsertArgs<ExtArgs>>): Prisma__waypointsClient<$Result.GetResult<Prisma.$waypointsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Waypoints.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {waypointsCountArgs} args - Arguments to filter Waypoints to count.
     * @example
     * // Count the number of Waypoints
     * const count = await prisma.waypoints.count({
     *   where: {
     *     // ... the filter for the Waypoints we want to count
     *   }
     * })
    **/
    count<T extends waypointsCountArgs>(
      args?: Subset<T, waypointsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WaypointsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Waypoints.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WaypointsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WaypointsAggregateArgs>(args: Subset<T, WaypointsAggregateArgs>): Prisma.PrismaPromise<GetWaypointsAggregateType<T>>

    /**
     * Group by Waypoints.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {waypointsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends waypointsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: waypointsGroupByArgs['orderBy'] }
        : { orderBy?: waypointsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, waypointsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWaypointsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the waypoints model
   */
  readonly fields: waypointsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for waypoints.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__waypointsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    users<T extends usersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, usersDefaultArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the waypoints model
   */
  interface waypointsFieldRefs {
    readonly id: FieldRef<"waypoints", 'Int'>
    readonly user_id: FieldRef<"waypoints", 'String'>
    readonly name: FieldRef<"waypoints", 'String'>
    readonly description: FieldRef<"waypoints", 'String'>
    readonly created_at: FieldRef<"waypoints", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * waypoints findUnique
   */
  export type waypointsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the waypoints
     */
    select?: waypointsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the waypoints
     */
    omit?: waypointsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: waypointsInclude<ExtArgs> | null
    /**
     * Filter, which waypoints to fetch.
     */
    where: waypointsWhereUniqueInput
  }

  /**
   * waypoints findUniqueOrThrow
   */
  export type waypointsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the waypoints
     */
    select?: waypointsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the waypoints
     */
    omit?: waypointsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: waypointsInclude<ExtArgs> | null
    /**
     * Filter, which waypoints to fetch.
     */
    where: waypointsWhereUniqueInput
  }

  /**
   * waypoints findFirst
   */
  export type waypointsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the waypoints
     */
    select?: waypointsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the waypoints
     */
    omit?: waypointsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: waypointsInclude<ExtArgs> | null
    /**
     * Filter, which waypoints to fetch.
     */
    where?: waypointsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of waypoints to fetch.
     */
    orderBy?: waypointsOrderByWithRelationInput | waypointsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for waypoints.
     */
    cursor?: waypointsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` waypoints from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` waypoints.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of waypoints.
     */
    distinct?: WaypointsScalarFieldEnum | WaypointsScalarFieldEnum[]
  }

  /**
   * waypoints findFirstOrThrow
   */
  export type waypointsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the waypoints
     */
    select?: waypointsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the waypoints
     */
    omit?: waypointsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: waypointsInclude<ExtArgs> | null
    /**
     * Filter, which waypoints to fetch.
     */
    where?: waypointsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of waypoints to fetch.
     */
    orderBy?: waypointsOrderByWithRelationInput | waypointsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for waypoints.
     */
    cursor?: waypointsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` waypoints from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` waypoints.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of waypoints.
     */
    distinct?: WaypointsScalarFieldEnum | WaypointsScalarFieldEnum[]
  }

  /**
   * waypoints findMany
   */
  export type waypointsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the waypoints
     */
    select?: waypointsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the waypoints
     */
    omit?: waypointsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: waypointsInclude<ExtArgs> | null
    /**
     * Filter, which waypoints to fetch.
     */
    where?: waypointsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of waypoints to fetch.
     */
    orderBy?: waypointsOrderByWithRelationInput | waypointsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing waypoints.
     */
    cursor?: waypointsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` waypoints from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` waypoints.
     */
    skip?: number
    distinct?: WaypointsScalarFieldEnum | WaypointsScalarFieldEnum[]
  }

  /**
   * waypoints create
   */
  export type waypointsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the waypoints
     */
    select?: waypointsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the waypoints
     */
    omit?: waypointsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: waypointsInclude<ExtArgs> | null
    /**
     * The data needed to create a waypoints.
     */
    data: XOR<waypointsCreateInput, waypointsUncheckedCreateInput>
  }

  /**
   * waypoints createMany
   */
  export type waypointsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many waypoints.
     */
    data: waypointsCreateManyInput | waypointsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * waypoints createManyAndReturn
   */
  export type waypointsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the waypoints
     */
    select?: waypointsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the waypoints
     */
    omit?: waypointsOmit<ExtArgs> | null
    /**
     * The data used to create many waypoints.
     */
    data: waypointsCreateManyInput | waypointsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: waypointsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * waypoints update
   */
  export type waypointsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the waypoints
     */
    select?: waypointsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the waypoints
     */
    omit?: waypointsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: waypointsInclude<ExtArgs> | null
    /**
     * The data needed to update a waypoints.
     */
    data: XOR<waypointsUpdateInput, waypointsUncheckedUpdateInput>
    /**
     * Choose, which waypoints to update.
     */
    where: waypointsWhereUniqueInput
  }

  /**
   * waypoints updateMany
   */
  export type waypointsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update waypoints.
     */
    data: XOR<waypointsUpdateManyMutationInput, waypointsUncheckedUpdateManyInput>
    /**
     * Filter which waypoints to update
     */
    where?: waypointsWhereInput
    /**
     * Limit how many waypoints to update.
     */
    limit?: number
  }

  /**
   * waypoints updateManyAndReturn
   */
  export type waypointsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the waypoints
     */
    select?: waypointsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the waypoints
     */
    omit?: waypointsOmit<ExtArgs> | null
    /**
     * The data used to update waypoints.
     */
    data: XOR<waypointsUpdateManyMutationInput, waypointsUncheckedUpdateManyInput>
    /**
     * Filter which waypoints to update
     */
    where?: waypointsWhereInput
    /**
     * Limit how many waypoints to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: waypointsIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * waypoints upsert
   */
  export type waypointsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the waypoints
     */
    select?: waypointsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the waypoints
     */
    omit?: waypointsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: waypointsInclude<ExtArgs> | null
    /**
     * The filter to search for the waypoints to update in case it exists.
     */
    where: waypointsWhereUniqueInput
    /**
     * In case the waypoints found by the `where` argument doesn't exist, create a new waypoints with this data.
     */
    create: XOR<waypointsCreateInput, waypointsUncheckedCreateInput>
    /**
     * In case the waypoints was found with the provided `where` argument, update it with this data.
     */
    update: XOR<waypointsUpdateInput, waypointsUncheckedUpdateInput>
  }

  /**
   * waypoints delete
   */
  export type waypointsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the waypoints
     */
    select?: waypointsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the waypoints
     */
    omit?: waypointsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: waypointsInclude<ExtArgs> | null
    /**
     * Filter which waypoints to delete.
     */
    where: waypointsWhereUniqueInput
  }

  /**
   * waypoints deleteMany
   */
  export type waypointsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which waypoints to delete
     */
    where?: waypointsWhereInput
    /**
     * Limit how many waypoints to delete.
     */
    limit?: number
  }

  /**
   * waypoints without action
   */
  export type waypointsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the waypoints
     */
    select?: waypointsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the waypoints
     */
    omit?: waypointsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: waypointsInclude<ExtArgs> | null
  }


  /**
   * Model lines
   */

  export type AggregateLines = {
    _count: LinesCountAggregateOutputType | null
    _avg: LinesAvgAggregateOutputType | null
    _sum: LinesSumAggregateOutputType | null
    _min: LinesMinAggregateOutputType | null
    _max: LinesMaxAggregateOutputType | null
  }

  export type LinesAvgAggregateOutputType = {
    id: number | null
  }

  export type LinesSumAggregateOutputType = {
    id: number | null
  }

  export type LinesMinAggregateOutputType = {
    id: number | null
    user_id: string | null
    name: string | null
    description: string | null
    created_at: Date | null
  }

  export type LinesMaxAggregateOutputType = {
    id: number | null
    user_id: string | null
    name: string | null
    description: string | null
    created_at: Date | null
  }

  export type LinesCountAggregateOutputType = {
    id: number
    user_id: number
    name: number
    description: number
    created_at: number
    _all: number
  }


  export type LinesAvgAggregateInputType = {
    id?: true
  }

  export type LinesSumAggregateInputType = {
    id?: true
  }

  export type LinesMinAggregateInputType = {
    id?: true
    user_id?: true
    name?: true
    description?: true
    created_at?: true
  }

  export type LinesMaxAggregateInputType = {
    id?: true
    user_id?: true
    name?: true
    description?: true
    created_at?: true
  }

  export type LinesCountAggregateInputType = {
    id?: true
    user_id?: true
    name?: true
    description?: true
    created_at?: true
    _all?: true
  }

  export type LinesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which lines to aggregate.
     */
    where?: linesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of lines to fetch.
     */
    orderBy?: linesOrderByWithRelationInput | linesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: linesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` lines from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` lines.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned lines
    **/
    _count?: true | LinesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LinesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LinesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LinesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LinesMaxAggregateInputType
  }

  export type GetLinesAggregateType<T extends LinesAggregateArgs> = {
        [P in keyof T & keyof AggregateLines]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLines[P]>
      : GetScalarType<T[P], AggregateLines[P]>
  }




  export type linesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: linesWhereInput
    orderBy?: linesOrderByWithAggregationInput | linesOrderByWithAggregationInput[]
    by: LinesScalarFieldEnum[] | LinesScalarFieldEnum
    having?: linesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LinesCountAggregateInputType | true
    _avg?: LinesAvgAggregateInputType
    _sum?: LinesSumAggregateInputType
    _min?: LinesMinAggregateInputType
    _max?: LinesMaxAggregateInputType
  }

  export type LinesGroupByOutputType = {
    id: number
    user_id: string
    name: string | null
    description: string | null
    created_at: Date | null
    _count: LinesCountAggregateOutputType | null
    _avg: LinesAvgAggregateOutputType | null
    _sum: LinesSumAggregateOutputType | null
    _min: LinesMinAggregateOutputType | null
    _max: LinesMaxAggregateOutputType | null
  }

  type GetLinesGroupByPayload<T extends linesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LinesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LinesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LinesGroupByOutputType[P]>
            : GetScalarType<T[P], LinesGroupByOutputType[P]>
        }
      >
    >


  export type linesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    name?: boolean
    description?: boolean
    created_at?: boolean
    users?: boolean | usersDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["lines"]>

  export type linesSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    name?: boolean
    description?: boolean
    created_at?: boolean
    users?: boolean | usersDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["lines"]>

  export type linesSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    name?: boolean
    description?: boolean
    created_at?: boolean
    users?: boolean | usersDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["lines"]>

  export type linesSelectScalar = {
    id?: boolean
    user_id?: boolean
    name?: boolean
    description?: boolean
    created_at?: boolean
  }

  export type linesOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "user_id" | "name" | "description" | "created_at", ExtArgs["result"]["lines"]>
  export type linesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | usersDefaultArgs<ExtArgs>
  }
  export type linesIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | usersDefaultArgs<ExtArgs>
  }
  export type linesIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | usersDefaultArgs<ExtArgs>
  }

  export type $linesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "lines"
    objects: {
      users: Prisma.$usersPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      user_id: string
      name: string | null
      description: string | null
      created_at: Date | null
    }, ExtArgs["result"]["lines"]>
    composites: {}
  }

  type linesGetPayload<S extends boolean | null | undefined | linesDefaultArgs> = $Result.GetResult<Prisma.$linesPayload, S>

  type linesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<linesFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: LinesCountAggregateInputType | true
    }

  export interface linesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['lines'], meta: { name: 'lines' } }
    /**
     * Find zero or one Lines that matches the filter.
     * @param {linesFindUniqueArgs} args - Arguments to find a Lines
     * @example
     * // Get one Lines
     * const lines = await prisma.lines.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends linesFindUniqueArgs>(args: SelectSubset<T, linesFindUniqueArgs<ExtArgs>>): Prisma__linesClient<$Result.GetResult<Prisma.$linesPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Lines that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {linesFindUniqueOrThrowArgs} args - Arguments to find a Lines
     * @example
     * // Get one Lines
     * const lines = await prisma.lines.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends linesFindUniqueOrThrowArgs>(args: SelectSubset<T, linesFindUniqueOrThrowArgs<ExtArgs>>): Prisma__linesClient<$Result.GetResult<Prisma.$linesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Lines that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {linesFindFirstArgs} args - Arguments to find a Lines
     * @example
     * // Get one Lines
     * const lines = await prisma.lines.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends linesFindFirstArgs>(args?: SelectSubset<T, linesFindFirstArgs<ExtArgs>>): Prisma__linesClient<$Result.GetResult<Prisma.$linesPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Lines that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {linesFindFirstOrThrowArgs} args - Arguments to find a Lines
     * @example
     * // Get one Lines
     * const lines = await prisma.lines.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends linesFindFirstOrThrowArgs>(args?: SelectSubset<T, linesFindFirstOrThrowArgs<ExtArgs>>): Prisma__linesClient<$Result.GetResult<Prisma.$linesPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Lines that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {linesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Lines
     * const lines = await prisma.lines.findMany()
     * 
     * // Get first 10 Lines
     * const lines = await prisma.lines.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const linesWithIdOnly = await prisma.lines.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends linesFindManyArgs>(args?: SelectSubset<T, linesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$linesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Lines.
     * @param {linesCreateArgs} args - Arguments to create a Lines.
     * @example
     * // Create one Lines
     * const Lines = await prisma.lines.create({
     *   data: {
     *     // ... data to create a Lines
     *   }
     * })
     * 
     */
    create<T extends linesCreateArgs>(args: SelectSubset<T, linesCreateArgs<ExtArgs>>): Prisma__linesClient<$Result.GetResult<Prisma.$linesPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Lines.
     * @param {linesCreateManyArgs} args - Arguments to create many Lines.
     * @example
     * // Create many Lines
     * const lines = await prisma.lines.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends linesCreateManyArgs>(args?: SelectSubset<T, linesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Lines and returns the data saved in the database.
     * @param {linesCreateManyAndReturnArgs} args - Arguments to create many Lines.
     * @example
     * // Create many Lines
     * const lines = await prisma.lines.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Lines and only return the `id`
     * const linesWithIdOnly = await prisma.lines.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends linesCreateManyAndReturnArgs>(args?: SelectSubset<T, linesCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$linesPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Lines.
     * @param {linesDeleteArgs} args - Arguments to delete one Lines.
     * @example
     * // Delete one Lines
     * const Lines = await prisma.lines.delete({
     *   where: {
     *     // ... filter to delete one Lines
     *   }
     * })
     * 
     */
    delete<T extends linesDeleteArgs>(args: SelectSubset<T, linesDeleteArgs<ExtArgs>>): Prisma__linesClient<$Result.GetResult<Prisma.$linesPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Lines.
     * @param {linesUpdateArgs} args - Arguments to update one Lines.
     * @example
     * // Update one Lines
     * const lines = await prisma.lines.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends linesUpdateArgs>(args: SelectSubset<T, linesUpdateArgs<ExtArgs>>): Prisma__linesClient<$Result.GetResult<Prisma.$linesPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Lines.
     * @param {linesDeleteManyArgs} args - Arguments to filter Lines to delete.
     * @example
     * // Delete a few Lines
     * const { count } = await prisma.lines.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends linesDeleteManyArgs>(args?: SelectSubset<T, linesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Lines.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {linesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Lines
     * const lines = await prisma.lines.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends linesUpdateManyArgs>(args: SelectSubset<T, linesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Lines and returns the data updated in the database.
     * @param {linesUpdateManyAndReturnArgs} args - Arguments to update many Lines.
     * @example
     * // Update many Lines
     * const lines = await prisma.lines.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Lines and only return the `id`
     * const linesWithIdOnly = await prisma.lines.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends linesUpdateManyAndReturnArgs>(args: SelectSubset<T, linesUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$linesPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Lines.
     * @param {linesUpsertArgs} args - Arguments to update or create a Lines.
     * @example
     * // Update or create a Lines
     * const lines = await prisma.lines.upsert({
     *   create: {
     *     // ... data to create a Lines
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Lines we want to update
     *   }
     * })
     */
    upsert<T extends linesUpsertArgs>(args: SelectSubset<T, linesUpsertArgs<ExtArgs>>): Prisma__linesClient<$Result.GetResult<Prisma.$linesPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Lines.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {linesCountArgs} args - Arguments to filter Lines to count.
     * @example
     * // Count the number of Lines
     * const count = await prisma.lines.count({
     *   where: {
     *     // ... the filter for the Lines we want to count
     *   }
     * })
    **/
    count<T extends linesCountArgs>(
      args?: Subset<T, linesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LinesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Lines.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LinesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LinesAggregateArgs>(args: Subset<T, LinesAggregateArgs>): Prisma.PrismaPromise<GetLinesAggregateType<T>>

    /**
     * Group by Lines.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {linesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends linesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: linesGroupByArgs['orderBy'] }
        : { orderBy?: linesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, linesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLinesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the lines model
   */
  readonly fields: linesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for lines.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__linesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    users<T extends usersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, usersDefaultArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the lines model
   */
  interface linesFieldRefs {
    readonly id: FieldRef<"lines", 'Int'>
    readonly user_id: FieldRef<"lines", 'String'>
    readonly name: FieldRef<"lines", 'String'>
    readonly description: FieldRef<"lines", 'String'>
    readonly created_at: FieldRef<"lines", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * lines findUnique
   */
  export type linesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the lines
     */
    select?: linesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the lines
     */
    omit?: linesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: linesInclude<ExtArgs> | null
    /**
     * Filter, which lines to fetch.
     */
    where: linesWhereUniqueInput
  }

  /**
   * lines findUniqueOrThrow
   */
  export type linesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the lines
     */
    select?: linesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the lines
     */
    omit?: linesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: linesInclude<ExtArgs> | null
    /**
     * Filter, which lines to fetch.
     */
    where: linesWhereUniqueInput
  }

  /**
   * lines findFirst
   */
  export type linesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the lines
     */
    select?: linesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the lines
     */
    omit?: linesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: linesInclude<ExtArgs> | null
    /**
     * Filter, which lines to fetch.
     */
    where?: linesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of lines to fetch.
     */
    orderBy?: linesOrderByWithRelationInput | linesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for lines.
     */
    cursor?: linesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` lines from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` lines.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of lines.
     */
    distinct?: LinesScalarFieldEnum | LinesScalarFieldEnum[]
  }

  /**
   * lines findFirstOrThrow
   */
  export type linesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the lines
     */
    select?: linesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the lines
     */
    omit?: linesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: linesInclude<ExtArgs> | null
    /**
     * Filter, which lines to fetch.
     */
    where?: linesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of lines to fetch.
     */
    orderBy?: linesOrderByWithRelationInput | linesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for lines.
     */
    cursor?: linesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` lines from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` lines.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of lines.
     */
    distinct?: LinesScalarFieldEnum | LinesScalarFieldEnum[]
  }

  /**
   * lines findMany
   */
  export type linesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the lines
     */
    select?: linesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the lines
     */
    omit?: linesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: linesInclude<ExtArgs> | null
    /**
     * Filter, which lines to fetch.
     */
    where?: linesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of lines to fetch.
     */
    orderBy?: linesOrderByWithRelationInput | linesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing lines.
     */
    cursor?: linesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` lines from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` lines.
     */
    skip?: number
    distinct?: LinesScalarFieldEnum | LinesScalarFieldEnum[]
  }

  /**
   * lines create
   */
  export type linesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the lines
     */
    select?: linesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the lines
     */
    omit?: linesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: linesInclude<ExtArgs> | null
    /**
     * The data needed to create a lines.
     */
    data: XOR<linesCreateInput, linesUncheckedCreateInput>
  }

  /**
   * lines createMany
   */
  export type linesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many lines.
     */
    data: linesCreateManyInput | linesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * lines createManyAndReturn
   */
  export type linesCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the lines
     */
    select?: linesSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the lines
     */
    omit?: linesOmit<ExtArgs> | null
    /**
     * The data used to create many lines.
     */
    data: linesCreateManyInput | linesCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: linesIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * lines update
   */
  export type linesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the lines
     */
    select?: linesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the lines
     */
    omit?: linesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: linesInclude<ExtArgs> | null
    /**
     * The data needed to update a lines.
     */
    data: XOR<linesUpdateInput, linesUncheckedUpdateInput>
    /**
     * Choose, which lines to update.
     */
    where: linesWhereUniqueInput
  }

  /**
   * lines updateMany
   */
  export type linesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update lines.
     */
    data: XOR<linesUpdateManyMutationInput, linesUncheckedUpdateManyInput>
    /**
     * Filter which lines to update
     */
    where?: linesWhereInput
    /**
     * Limit how many lines to update.
     */
    limit?: number
  }

  /**
   * lines updateManyAndReturn
   */
  export type linesUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the lines
     */
    select?: linesSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the lines
     */
    omit?: linesOmit<ExtArgs> | null
    /**
     * The data used to update lines.
     */
    data: XOR<linesUpdateManyMutationInput, linesUncheckedUpdateManyInput>
    /**
     * Filter which lines to update
     */
    where?: linesWhereInput
    /**
     * Limit how many lines to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: linesIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * lines upsert
   */
  export type linesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the lines
     */
    select?: linesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the lines
     */
    omit?: linesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: linesInclude<ExtArgs> | null
    /**
     * The filter to search for the lines to update in case it exists.
     */
    where: linesWhereUniqueInput
    /**
     * In case the lines found by the `where` argument doesn't exist, create a new lines with this data.
     */
    create: XOR<linesCreateInput, linesUncheckedCreateInput>
    /**
     * In case the lines was found with the provided `where` argument, update it with this data.
     */
    update: XOR<linesUpdateInput, linesUncheckedUpdateInput>
  }

  /**
   * lines delete
   */
  export type linesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the lines
     */
    select?: linesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the lines
     */
    omit?: linesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: linesInclude<ExtArgs> | null
    /**
     * Filter which lines to delete.
     */
    where: linesWhereUniqueInput
  }

  /**
   * lines deleteMany
   */
  export type linesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which lines to delete
     */
    where?: linesWhereInput
    /**
     * Limit how many lines to delete.
     */
    limit?: number
  }

  /**
   * lines without action
   */
  export type linesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the lines
     */
    select?: linesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the lines
     */
    omit?: linesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: linesInclude<ExtArgs> | null
  }


  /**
   * Model shapes
   */

  export type AggregateShapes = {
    _count: ShapesCountAggregateOutputType | null
    _avg: ShapesAvgAggregateOutputType | null
    _sum: ShapesSumAggregateOutputType | null
    _min: ShapesMinAggregateOutputType | null
    _max: ShapesMaxAggregateOutputType | null
  }

  export type ShapesAvgAggregateOutputType = {
    id: number | null
  }

  export type ShapesSumAggregateOutputType = {
    id: number | null
  }

  export type ShapesMinAggregateOutputType = {
    id: number | null
    user_id: string | null
    name: string | null
    description: string | null
    created_at: Date | null
  }

  export type ShapesMaxAggregateOutputType = {
    id: number | null
    user_id: string | null
    name: string | null
    description: string | null
    created_at: Date | null
  }

  export type ShapesCountAggregateOutputType = {
    id: number
    user_id: number
    name: number
    description: number
    created_at: number
    _all: number
  }


  export type ShapesAvgAggregateInputType = {
    id?: true
  }

  export type ShapesSumAggregateInputType = {
    id?: true
  }

  export type ShapesMinAggregateInputType = {
    id?: true
    user_id?: true
    name?: true
    description?: true
    created_at?: true
  }

  export type ShapesMaxAggregateInputType = {
    id?: true
    user_id?: true
    name?: true
    description?: true
    created_at?: true
  }

  export type ShapesCountAggregateInputType = {
    id?: true
    user_id?: true
    name?: true
    description?: true
    created_at?: true
    _all?: true
  }

  export type ShapesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which shapes to aggregate.
     */
    where?: shapesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of shapes to fetch.
     */
    orderBy?: shapesOrderByWithRelationInput | shapesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: shapesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` shapes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` shapes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned shapes
    **/
    _count?: true | ShapesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ShapesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ShapesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ShapesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ShapesMaxAggregateInputType
  }

  export type GetShapesAggregateType<T extends ShapesAggregateArgs> = {
        [P in keyof T & keyof AggregateShapes]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateShapes[P]>
      : GetScalarType<T[P], AggregateShapes[P]>
  }




  export type shapesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: shapesWhereInput
    orderBy?: shapesOrderByWithAggregationInput | shapesOrderByWithAggregationInput[]
    by: ShapesScalarFieldEnum[] | ShapesScalarFieldEnum
    having?: shapesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ShapesCountAggregateInputType | true
    _avg?: ShapesAvgAggregateInputType
    _sum?: ShapesSumAggregateInputType
    _min?: ShapesMinAggregateInputType
    _max?: ShapesMaxAggregateInputType
  }

  export type ShapesGroupByOutputType = {
    id: number
    user_id: string
    name: string | null
    description: string | null
    created_at: Date | null
    _count: ShapesCountAggregateOutputType | null
    _avg: ShapesAvgAggregateOutputType | null
    _sum: ShapesSumAggregateOutputType | null
    _min: ShapesMinAggregateOutputType | null
    _max: ShapesMaxAggregateOutputType | null
  }

  type GetShapesGroupByPayload<T extends shapesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ShapesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ShapesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ShapesGroupByOutputType[P]>
            : GetScalarType<T[P], ShapesGroupByOutputType[P]>
        }
      >
    >


  export type shapesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    name?: boolean
    description?: boolean
    created_at?: boolean
    users?: boolean | usersDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["shapes"]>

  export type shapesSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    name?: boolean
    description?: boolean
    created_at?: boolean
    users?: boolean | usersDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["shapes"]>

  export type shapesSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    name?: boolean
    description?: boolean
    created_at?: boolean
    users?: boolean | usersDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["shapes"]>

  export type shapesSelectScalar = {
    id?: boolean
    user_id?: boolean
    name?: boolean
    description?: boolean
    created_at?: boolean
  }

  export type shapesOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "user_id" | "name" | "description" | "created_at", ExtArgs["result"]["shapes"]>
  export type shapesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | usersDefaultArgs<ExtArgs>
  }
  export type shapesIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | usersDefaultArgs<ExtArgs>
  }
  export type shapesIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | usersDefaultArgs<ExtArgs>
  }

  export type $shapesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "shapes"
    objects: {
      users: Prisma.$usersPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      user_id: string
      name: string | null
      description: string | null
      created_at: Date | null
    }, ExtArgs["result"]["shapes"]>
    composites: {}
  }

  type shapesGetPayload<S extends boolean | null | undefined | shapesDefaultArgs> = $Result.GetResult<Prisma.$shapesPayload, S>

  type shapesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<shapesFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ShapesCountAggregateInputType | true
    }

  export interface shapesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['shapes'], meta: { name: 'shapes' } }
    /**
     * Find zero or one Shapes that matches the filter.
     * @param {shapesFindUniqueArgs} args - Arguments to find a Shapes
     * @example
     * // Get one Shapes
     * const shapes = await prisma.shapes.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends shapesFindUniqueArgs>(args: SelectSubset<T, shapesFindUniqueArgs<ExtArgs>>): Prisma__shapesClient<$Result.GetResult<Prisma.$shapesPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Shapes that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {shapesFindUniqueOrThrowArgs} args - Arguments to find a Shapes
     * @example
     * // Get one Shapes
     * const shapes = await prisma.shapes.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends shapesFindUniqueOrThrowArgs>(args: SelectSubset<T, shapesFindUniqueOrThrowArgs<ExtArgs>>): Prisma__shapesClient<$Result.GetResult<Prisma.$shapesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Shapes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {shapesFindFirstArgs} args - Arguments to find a Shapes
     * @example
     * // Get one Shapes
     * const shapes = await prisma.shapes.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends shapesFindFirstArgs>(args?: SelectSubset<T, shapesFindFirstArgs<ExtArgs>>): Prisma__shapesClient<$Result.GetResult<Prisma.$shapesPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Shapes that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {shapesFindFirstOrThrowArgs} args - Arguments to find a Shapes
     * @example
     * // Get one Shapes
     * const shapes = await prisma.shapes.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends shapesFindFirstOrThrowArgs>(args?: SelectSubset<T, shapesFindFirstOrThrowArgs<ExtArgs>>): Prisma__shapesClient<$Result.GetResult<Prisma.$shapesPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Shapes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {shapesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Shapes
     * const shapes = await prisma.shapes.findMany()
     * 
     * // Get first 10 Shapes
     * const shapes = await prisma.shapes.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const shapesWithIdOnly = await prisma.shapes.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends shapesFindManyArgs>(args?: SelectSubset<T, shapesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$shapesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Shapes.
     * @param {shapesCreateArgs} args - Arguments to create a Shapes.
     * @example
     * // Create one Shapes
     * const Shapes = await prisma.shapes.create({
     *   data: {
     *     // ... data to create a Shapes
     *   }
     * })
     * 
     */
    create<T extends shapesCreateArgs>(args: SelectSubset<T, shapesCreateArgs<ExtArgs>>): Prisma__shapesClient<$Result.GetResult<Prisma.$shapesPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Shapes.
     * @param {shapesCreateManyArgs} args - Arguments to create many Shapes.
     * @example
     * // Create many Shapes
     * const shapes = await prisma.shapes.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends shapesCreateManyArgs>(args?: SelectSubset<T, shapesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Shapes and returns the data saved in the database.
     * @param {shapesCreateManyAndReturnArgs} args - Arguments to create many Shapes.
     * @example
     * // Create many Shapes
     * const shapes = await prisma.shapes.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Shapes and only return the `id`
     * const shapesWithIdOnly = await prisma.shapes.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends shapesCreateManyAndReturnArgs>(args?: SelectSubset<T, shapesCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$shapesPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Shapes.
     * @param {shapesDeleteArgs} args - Arguments to delete one Shapes.
     * @example
     * // Delete one Shapes
     * const Shapes = await prisma.shapes.delete({
     *   where: {
     *     // ... filter to delete one Shapes
     *   }
     * })
     * 
     */
    delete<T extends shapesDeleteArgs>(args: SelectSubset<T, shapesDeleteArgs<ExtArgs>>): Prisma__shapesClient<$Result.GetResult<Prisma.$shapesPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Shapes.
     * @param {shapesUpdateArgs} args - Arguments to update one Shapes.
     * @example
     * // Update one Shapes
     * const shapes = await prisma.shapes.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends shapesUpdateArgs>(args: SelectSubset<T, shapesUpdateArgs<ExtArgs>>): Prisma__shapesClient<$Result.GetResult<Prisma.$shapesPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Shapes.
     * @param {shapesDeleteManyArgs} args - Arguments to filter Shapes to delete.
     * @example
     * // Delete a few Shapes
     * const { count } = await prisma.shapes.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends shapesDeleteManyArgs>(args?: SelectSubset<T, shapesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Shapes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {shapesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Shapes
     * const shapes = await prisma.shapes.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends shapesUpdateManyArgs>(args: SelectSubset<T, shapesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Shapes and returns the data updated in the database.
     * @param {shapesUpdateManyAndReturnArgs} args - Arguments to update many Shapes.
     * @example
     * // Update many Shapes
     * const shapes = await prisma.shapes.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Shapes and only return the `id`
     * const shapesWithIdOnly = await prisma.shapes.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends shapesUpdateManyAndReturnArgs>(args: SelectSubset<T, shapesUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$shapesPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Shapes.
     * @param {shapesUpsertArgs} args - Arguments to update or create a Shapes.
     * @example
     * // Update or create a Shapes
     * const shapes = await prisma.shapes.upsert({
     *   create: {
     *     // ... data to create a Shapes
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Shapes we want to update
     *   }
     * })
     */
    upsert<T extends shapesUpsertArgs>(args: SelectSubset<T, shapesUpsertArgs<ExtArgs>>): Prisma__shapesClient<$Result.GetResult<Prisma.$shapesPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Shapes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {shapesCountArgs} args - Arguments to filter Shapes to count.
     * @example
     * // Count the number of Shapes
     * const count = await prisma.shapes.count({
     *   where: {
     *     // ... the filter for the Shapes we want to count
     *   }
     * })
    **/
    count<T extends shapesCountArgs>(
      args?: Subset<T, shapesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ShapesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Shapes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShapesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ShapesAggregateArgs>(args: Subset<T, ShapesAggregateArgs>): Prisma.PrismaPromise<GetShapesAggregateType<T>>

    /**
     * Group by Shapes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {shapesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends shapesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: shapesGroupByArgs['orderBy'] }
        : { orderBy?: shapesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, shapesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetShapesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the shapes model
   */
  readonly fields: shapesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for shapes.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__shapesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    users<T extends usersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, usersDefaultArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the shapes model
   */
  interface shapesFieldRefs {
    readonly id: FieldRef<"shapes", 'Int'>
    readonly user_id: FieldRef<"shapes", 'String'>
    readonly name: FieldRef<"shapes", 'String'>
    readonly description: FieldRef<"shapes", 'String'>
    readonly created_at: FieldRef<"shapes", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * shapes findUnique
   */
  export type shapesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the shapes
     */
    select?: shapesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the shapes
     */
    omit?: shapesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: shapesInclude<ExtArgs> | null
    /**
     * Filter, which shapes to fetch.
     */
    where: shapesWhereUniqueInput
  }

  /**
   * shapes findUniqueOrThrow
   */
  export type shapesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the shapes
     */
    select?: shapesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the shapes
     */
    omit?: shapesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: shapesInclude<ExtArgs> | null
    /**
     * Filter, which shapes to fetch.
     */
    where: shapesWhereUniqueInput
  }

  /**
   * shapes findFirst
   */
  export type shapesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the shapes
     */
    select?: shapesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the shapes
     */
    omit?: shapesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: shapesInclude<ExtArgs> | null
    /**
     * Filter, which shapes to fetch.
     */
    where?: shapesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of shapes to fetch.
     */
    orderBy?: shapesOrderByWithRelationInput | shapesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for shapes.
     */
    cursor?: shapesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` shapes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` shapes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of shapes.
     */
    distinct?: ShapesScalarFieldEnum | ShapesScalarFieldEnum[]
  }

  /**
   * shapes findFirstOrThrow
   */
  export type shapesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the shapes
     */
    select?: shapesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the shapes
     */
    omit?: shapesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: shapesInclude<ExtArgs> | null
    /**
     * Filter, which shapes to fetch.
     */
    where?: shapesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of shapes to fetch.
     */
    orderBy?: shapesOrderByWithRelationInput | shapesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for shapes.
     */
    cursor?: shapesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` shapes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` shapes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of shapes.
     */
    distinct?: ShapesScalarFieldEnum | ShapesScalarFieldEnum[]
  }

  /**
   * shapes findMany
   */
  export type shapesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the shapes
     */
    select?: shapesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the shapes
     */
    omit?: shapesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: shapesInclude<ExtArgs> | null
    /**
     * Filter, which shapes to fetch.
     */
    where?: shapesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of shapes to fetch.
     */
    orderBy?: shapesOrderByWithRelationInput | shapesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing shapes.
     */
    cursor?: shapesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` shapes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` shapes.
     */
    skip?: number
    distinct?: ShapesScalarFieldEnum | ShapesScalarFieldEnum[]
  }

  /**
   * shapes create
   */
  export type shapesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the shapes
     */
    select?: shapesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the shapes
     */
    omit?: shapesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: shapesInclude<ExtArgs> | null
    /**
     * The data needed to create a shapes.
     */
    data: XOR<shapesCreateInput, shapesUncheckedCreateInput>
  }

  /**
   * shapes createMany
   */
  export type shapesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many shapes.
     */
    data: shapesCreateManyInput | shapesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * shapes createManyAndReturn
   */
  export type shapesCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the shapes
     */
    select?: shapesSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the shapes
     */
    omit?: shapesOmit<ExtArgs> | null
    /**
     * The data used to create many shapes.
     */
    data: shapesCreateManyInput | shapesCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: shapesIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * shapes update
   */
  export type shapesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the shapes
     */
    select?: shapesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the shapes
     */
    omit?: shapesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: shapesInclude<ExtArgs> | null
    /**
     * The data needed to update a shapes.
     */
    data: XOR<shapesUpdateInput, shapesUncheckedUpdateInput>
    /**
     * Choose, which shapes to update.
     */
    where: shapesWhereUniqueInput
  }

  /**
   * shapes updateMany
   */
  export type shapesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update shapes.
     */
    data: XOR<shapesUpdateManyMutationInput, shapesUncheckedUpdateManyInput>
    /**
     * Filter which shapes to update
     */
    where?: shapesWhereInput
    /**
     * Limit how many shapes to update.
     */
    limit?: number
  }

  /**
   * shapes updateManyAndReturn
   */
  export type shapesUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the shapes
     */
    select?: shapesSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the shapes
     */
    omit?: shapesOmit<ExtArgs> | null
    /**
     * The data used to update shapes.
     */
    data: XOR<shapesUpdateManyMutationInput, shapesUncheckedUpdateManyInput>
    /**
     * Filter which shapes to update
     */
    where?: shapesWhereInput
    /**
     * Limit how many shapes to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: shapesIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * shapes upsert
   */
  export type shapesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the shapes
     */
    select?: shapesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the shapes
     */
    omit?: shapesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: shapesInclude<ExtArgs> | null
    /**
     * The filter to search for the shapes to update in case it exists.
     */
    where: shapesWhereUniqueInput
    /**
     * In case the shapes found by the `where` argument doesn't exist, create a new shapes with this data.
     */
    create: XOR<shapesCreateInput, shapesUncheckedCreateInput>
    /**
     * In case the shapes was found with the provided `where` argument, update it with this data.
     */
    update: XOR<shapesUpdateInput, shapesUncheckedUpdateInput>
  }

  /**
   * shapes delete
   */
  export type shapesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the shapes
     */
    select?: shapesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the shapes
     */
    omit?: shapesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: shapesInclude<ExtArgs> | null
    /**
     * Filter which shapes to delete.
     */
    where: shapesWhereUniqueInput
  }

  /**
   * shapes deleteMany
   */
  export type shapesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which shapes to delete
     */
    where?: shapesWhereInput
    /**
     * Limit how many shapes to delete.
     */
    limit?: number
  }

  /**
   * shapes without action
   */
  export type shapesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the shapes
     */
    select?: shapesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the shapes
     */
    omit?: shapesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: shapesInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UsersScalarFieldEnum: {
    id: 'id',
    username: 'username',
    created_at: 'created_at'
  };

  export type UsersScalarFieldEnum = (typeof UsersScalarFieldEnum)[keyof typeof UsersScalarFieldEnum]


  export const WaypointsScalarFieldEnum: {
    id: 'id',
    user_id: 'user_id',
    name: 'name',
    description: 'description',
    created_at: 'created_at'
  };

  export type WaypointsScalarFieldEnum = (typeof WaypointsScalarFieldEnum)[keyof typeof WaypointsScalarFieldEnum]


  export const LinesScalarFieldEnum: {
    id: 'id',
    user_id: 'user_id',
    name: 'name',
    description: 'description',
    created_at: 'created_at'
  };

  export type LinesScalarFieldEnum = (typeof LinesScalarFieldEnum)[keyof typeof LinesScalarFieldEnum]


  export const ShapesScalarFieldEnum: {
    id: 'id',
    user_id: 'user_id',
    name: 'name',
    description: 'description',
    created_at: 'created_at'
  };

  export type ShapesScalarFieldEnum = (typeof ShapesScalarFieldEnum)[keyof typeof ShapesScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type usersWhereInput = {
    AND?: usersWhereInput | usersWhereInput[]
    OR?: usersWhereInput[]
    NOT?: usersWhereInput | usersWhereInput[]
    id?: UuidFilter<"users"> | string
    username?: StringFilter<"users"> | string
    created_at?: DateTimeNullableFilter<"users"> | Date | string | null
    lines?: LinesListRelationFilter
    shapes?: ShapesListRelationFilter
    waypoints?: WaypointsListRelationFilter
  }

  export type usersOrderByWithRelationInput = {
    id?: SortOrder
    username?: SortOrder
    created_at?: SortOrderInput | SortOrder
    lines?: linesOrderByRelationAggregateInput
    shapes?: shapesOrderByRelationAggregateInput
    waypoints?: waypointsOrderByRelationAggregateInput
  }

  export type usersWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    username?: string
    AND?: usersWhereInput | usersWhereInput[]
    OR?: usersWhereInput[]
    NOT?: usersWhereInput | usersWhereInput[]
    created_at?: DateTimeNullableFilter<"users"> | Date | string | null
    lines?: LinesListRelationFilter
    shapes?: ShapesListRelationFilter
    waypoints?: WaypointsListRelationFilter
  }, "id" | "username">

  export type usersOrderByWithAggregationInput = {
    id?: SortOrder
    username?: SortOrder
    created_at?: SortOrderInput | SortOrder
    _count?: usersCountOrderByAggregateInput
    _max?: usersMaxOrderByAggregateInput
    _min?: usersMinOrderByAggregateInput
  }

  export type usersScalarWhereWithAggregatesInput = {
    AND?: usersScalarWhereWithAggregatesInput | usersScalarWhereWithAggregatesInput[]
    OR?: usersScalarWhereWithAggregatesInput[]
    NOT?: usersScalarWhereWithAggregatesInput | usersScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"users"> | string
    username?: StringWithAggregatesFilter<"users"> | string
    created_at?: DateTimeNullableWithAggregatesFilter<"users"> | Date | string | null
  }

  export type waypointsWhereInput = {
    AND?: waypointsWhereInput | waypointsWhereInput[]
    OR?: waypointsWhereInput[]
    NOT?: waypointsWhereInput | waypointsWhereInput[]
    id?: IntFilter<"waypoints"> | number
    user_id?: UuidFilter<"waypoints"> | string
    name?: StringNullableFilter<"waypoints"> | string | null
    description?: StringNullableFilter<"waypoints"> | string | null
    created_at?: DateTimeNullableFilter<"waypoints"> | Date | string | null
    users?: XOR<UsersScalarRelationFilter, usersWhereInput>
  }

  export type waypointsOrderByWithRelationInput = {
    id?: SortOrder
    user_id?: SortOrder
    name?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    created_at?: SortOrderInput | SortOrder
    users?: usersOrderByWithRelationInput
  }

  export type waypointsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: waypointsWhereInput | waypointsWhereInput[]
    OR?: waypointsWhereInput[]
    NOT?: waypointsWhereInput | waypointsWhereInput[]
    user_id?: UuidFilter<"waypoints"> | string
    name?: StringNullableFilter<"waypoints"> | string | null
    description?: StringNullableFilter<"waypoints"> | string | null
    created_at?: DateTimeNullableFilter<"waypoints"> | Date | string | null
    users?: XOR<UsersScalarRelationFilter, usersWhereInput>
  }, "id">

  export type waypointsOrderByWithAggregationInput = {
    id?: SortOrder
    user_id?: SortOrder
    name?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    created_at?: SortOrderInput | SortOrder
    _count?: waypointsCountOrderByAggregateInput
    _avg?: waypointsAvgOrderByAggregateInput
    _max?: waypointsMaxOrderByAggregateInput
    _min?: waypointsMinOrderByAggregateInput
    _sum?: waypointsSumOrderByAggregateInput
  }

  export type waypointsScalarWhereWithAggregatesInput = {
    AND?: waypointsScalarWhereWithAggregatesInput | waypointsScalarWhereWithAggregatesInput[]
    OR?: waypointsScalarWhereWithAggregatesInput[]
    NOT?: waypointsScalarWhereWithAggregatesInput | waypointsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"waypoints"> | number
    user_id?: UuidWithAggregatesFilter<"waypoints"> | string
    name?: StringNullableWithAggregatesFilter<"waypoints"> | string | null
    description?: StringNullableWithAggregatesFilter<"waypoints"> | string | null
    created_at?: DateTimeNullableWithAggregatesFilter<"waypoints"> | Date | string | null
  }

  export type linesWhereInput = {
    AND?: linesWhereInput | linesWhereInput[]
    OR?: linesWhereInput[]
    NOT?: linesWhereInput | linesWhereInput[]
    id?: IntFilter<"lines"> | number
    user_id?: UuidFilter<"lines"> | string
    name?: StringNullableFilter<"lines"> | string | null
    description?: StringNullableFilter<"lines"> | string | null
    created_at?: DateTimeNullableFilter<"lines"> | Date | string | null
    users?: XOR<UsersScalarRelationFilter, usersWhereInput>
  }

  export type linesOrderByWithRelationInput = {
    id?: SortOrder
    user_id?: SortOrder
    name?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    created_at?: SortOrderInput | SortOrder
    users?: usersOrderByWithRelationInput
  }

  export type linesWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: linesWhereInput | linesWhereInput[]
    OR?: linesWhereInput[]
    NOT?: linesWhereInput | linesWhereInput[]
    user_id?: UuidFilter<"lines"> | string
    name?: StringNullableFilter<"lines"> | string | null
    description?: StringNullableFilter<"lines"> | string | null
    created_at?: DateTimeNullableFilter<"lines"> | Date | string | null
    users?: XOR<UsersScalarRelationFilter, usersWhereInput>
  }, "id">

  export type linesOrderByWithAggregationInput = {
    id?: SortOrder
    user_id?: SortOrder
    name?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    created_at?: SortOrderInput | SortOrder
    _count?: linesCountOrderByAggregateInput
    _avg?: linesAvgOrderByAggregateInput
    _max?: linesMaxOrderByAggregateInput
    _min?: linesMinOrderByAggregateInput
    _sum?: linesSumOrderByAggregateInput
  }

  export type linesScalarWhereWithAggregatesInput = {
    AND?: linesScalarWhereWithAggregatesInput | linesScalarWhereWithAggregatesInput[]
    OR?: linesScalarWhereWithAggregatesInput[]
    NOT?: linesScalarWhereWithAggregatesInput | linesScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"lines"> | number
    user_id?: UuidWithAggregatesFilter<"lines"> | string
    name?: StringNullableWithAggregatesFilter<"lines"> | string | null
    description?: StringNullableWithAggregatesFilter<"lines"> | string | null
    created_at?: DateTimeNullableWithAggregatesFilter<"lines"> | Date | string | null
  }

  export type shapesWhereInput = {
    AND?: shapesWhereInput | shapesWhereInput[]
    OR?: shapesWhereInput[]
    NOT?: shapesWhereInput | shapesWhereInput[]
    id?: IntFilter<"shapes"> | number
    user_id?: UuidFilter<"shapes"> | string
    name?: StringNullableFilter<"shapes"> | string | null
    description?: StringNullableFilter<"shapes"> | string | null
    created_at?: DateTimeNullableFilter<"shapes"> | Date | string | null
    users?: XOR<UsersScalarRelationFilter, usersWhereInput>
  }

  export type shapesOrderByWithRelationInput = {
    id?: SortOrder
    user_id?: SortOrder
    name?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    created_at?: SortOrderInput | SortOrder
    users?: usersOrderByWithRelationInput
  }

  export type shapesWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: shapesWhereInput | shapesWhereInput[]
    OR?: shapesWhereInput[]
    NOT?: shapesWhereInput | shapesWhereInput[]
    user_id?: UuidFilter<"shapes"> | string
    name?: StringNullableFilter<"shapes"> | string | null
    description?: StringNullableFilter<"shapes"> | string | null
    created_at?: DateTimeNullableFilter<"shapes"> | Date | string | null
    users?: XOR<UsersScalarRelationFilter, usersWhereInput>
  }, "id">

  export type shapesOrderByWithAggregationInput = {
    id?: SortOrder
    user_id?: SortOrder
    name?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    created_at?: SortOrderInput | SortOrder
    _count?: shapesCountOrderByAggregateInput
    _avg?: shapesAvgOrderByAggregateInput
    _max?: shapesMaxOrderByAggregateInput
    _min?: shapesMinOrderByAggregateInput
    _sum?: shapesSumOrderByAggregateInput
  }

  export type shapesScalarWhereWithAggregatesInput = {
    AND?: shapesScalarWhereWithAggregatesInput | shapesScalarWhereWithAggregatesInput[]
    OR?: shapesScalarWhereWithAggregatesInput[]
    NOT?: shapesScalarWhereWithAggregatesInput | shapesScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"shapes"> | number
    user_id?: UuidWithAggregatesFilter<"shapes"> | string
    name?: StringNullableWithAggregatesFilter<"shapes"> | string | null
    description?: StringNullableWithAggregatesFilter<"shapes"> | string | null
    created_at?: DateTimeNullableWithAggregatesFilter<"shapes"> | Date | string | null
  }

  export type usersCreateInput = {
    id?: string
    username: string
    created_at?: Date | string | null
    lines?: linesCreateNestedManyWithoutUsersInput
    shapes?: shapesCreateNestedManyWithoutUsersInput
    waypoints?: waypointsCreateNestedManyWithoutUsersInput
  }

  export type usersUncheckedCreateInput = {
    id?: string
    username: string
    created_at?: Date | string | null
    lines?: linesUncheckedCreateNestedManyWithoutUsersInput
    shapes?: shapesUncheckedCreateNestedManyWithoutUsersInput
    waypoints?: waypointsUncheckedCreateNestedManyWithoutUsersInput
  }

  export type usersUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lines?: linesUpdateManyWithoutUsersNestedInput
    shapes?: shapesUpdateManyWithoutUsersNestedInput
    waypoints?: waypointsUpdateManyWithoutUsersNestedInput
  }

  export type usersUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lines?: linesUncheckedUpdateManyWithoutUsersNestedInput
    shapes?: shapesUncheckedUpdateManyWithoutUsersNestedInput
    waypoints?: waypointsUncheckedUpdateManyWithoutUsersNestedInput
  }

  export type usersCreateManyInput = {
    id?: string
    username: string
    created_at?: Date | string | null
  }

  export type usersUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type usersUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type waypointsCreateInput = {
    name?: string | null
    description?: string | null
    created_at?: Date | string | null
    users: usersCreateNestedOneWithoutWaypointsInput
  }

  export type waypointsUncheckedCreateInput = {
    id?: number
    user_id: string
    name?: string | null
    description?: string | null
    created_at?: Date | string | null
  }

  export type waypointsUpdateInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    users?: usersUpdateOneRequiredWithoutWaypointsNestedInput
  }

  export type waypointsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type waypointsCreateManyInput = {
    id?: number
    user_id: string
    name?: string | null
    description?: string | null
    created_at?: Date | string | null
  }

  export type waypointsUpdateManyMutationInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type waypointsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type linesCreateInput = {
    name?: string | null
    description?: string | null
    created_at?: Date | string | null
    users: usersCreateNestedOneWithoutLinesInput
  }

  export type linesUncheckedCreateInput = {
    id?: number
    user_id: string
    name?: string | null
    description?: string | null
    created_at?: Date | string | null
  }

  export type linesUpdateInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    users?: usersUpdateOneRequiredWithoutLinesNestedInput
  }

  export type linesUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type linesCreateManyInput = {
    id?: number
    user_id: string
    name?: string | null
    description?: string | null
    created_at?: Date | string | null
  }

  export type linesUpdateManyMutationInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type linesUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type shapesCreateInput = {
    name?: string | null
    description?: string | null
    created_at?: Date | string | null
    users: usersCreateNestedOneWithoutShapesInput
  }

  export type shapesUncheckedCreateInput = {
    id?: number
    user_id: string
    name?: string | null
    description?: string | null
    created_at?: Date | string | null
  }

  export type shapesUpdateInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    users?: usersUpdateOneRequiredWithoutShapesNestedInput
  }

  export type shapesUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type shapesCreateManyInput = {
    id?: number
    user_id: string
    name?: string | null
    description?: string | null
    created_at?: Date | string | null
  }

  export type shapesUpdateManyMutationInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type shapesUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UuidFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedUuidFilter<$PrismaModel> | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type LinesListRelationFilter = {
    every?: linesWhereInput
    some?: linesWhereInput
    none?: linesWhereInput
  }

  export type ShapesListRelationFilter = {
    every?: shapesWhereInput
    some?: shapesWhereInput
    none?: shapesWhereInput
  }

  export type WaypointsListRelationFilter = {
    every?: waypointsWhereInput
    some?: waypointsWhereInput
    none?: waypointsWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type linesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type shapesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type waypointsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type usersCountOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    created_at?: SortOrder
  }

  export type usersMaxOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    created_at?: SortOrder
  }

  export type usersMinOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    created_at?: SortOrder
  }

  export type UuidWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedUuidWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type UsersScalarRelationFilter = {
    is?: usersWhereInput
    isNot?: usersWhereInput
  }

  export type waypointsCountOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    created_at?: SortOrder
  }

  export type waypointsAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type waypointsMaxOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    created_at?: SortOrder
  }

  export type waypointsMinOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    created_at?: SortOrder
  }

  export type waypointsSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type linesCountOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    created_at?: SortOrder
  }

  export type linesAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type linesMaxOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    created_at?: SortOrder
  }

  export type linesMinOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    created_at?: SortOrder
  }

  export type linesSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type shapesCountOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    created_at?: SortOrder
  }

  export type shapesAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type shapesMaxOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    created_at?: SortOrder
  }

  export type shapesMinOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    created_at?: SortOrder
  }

  export type shapesSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type linesCreateNestedManyWithoutUsersInput = {
    create?: XOR<linesCreateWithoutUsersInput, linesUncheckedCreateWithoutUsersInput> | linesCreateWithoutUsersInput[] | linesUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: linesCreateOrConnectWithoutUsersInput | linesCreateOrConnectWithoutUsersInput[]
    createMany?: linesCreateManyUsersInputEnvelope
    connect?: linesWhereUniqueInput | linesWhereUniqueInput[]
  }

  export type shapesCreateNestedManyWithoutUsersInput = {
    create?: XOR<shapesCreateWithoutUsersInput, shapesUncheckedCreateWithoutUsersInput> | shapesCreateWithoutUsersInput[] | shapesUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: shapesCreateOrConnectWithoutUsersInput | shapesCreateOrConnectWithoutUsersInput[]
    createMany?: shapesCreateManyUsersInputEnvelope
    connect?: shapesWhereUniqueInput | shapesWhereUniqueInput[]
  }

  export type waypointsCreateNestedManyWithoutUsersInput = {
    create?: XOR<waypointsCreateWithoutUsersInput, waypointsUncheckedCreateWithoutUsersInput> | waypointsCreateWithoutUsersInput[] | waypointsUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: waypointsCreateOrConnectWithoutUsersInput | waypointsCreateOrConnectWithoutUsersInput[]
    createMany?: waypointsCreateManyUsersInputEnvelope
    connect?: waypointsWhereUniqueInput | waypointsWhereUniqueInput[]
  }

  export type linesUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<linesCreateWithoutUsersInput, linesUncheckedCreateWithoutUsersInput> | linesCreateWithoutUsersInput[] | linesUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: linesCreateOrConnectWithoutUsersInput | linesCreateOrConnectWithoutUsersInput[]
    createMany?: linesCreateManyUsersInputEnvelope
    connect?: linesWhereUniqueInput | linesWhereUniqueInput[]
  }

  export type shapesUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<shapesCreateWithoutUsersInput, shapesUncheckedCreateWithoutUsersInput> | shapesCreateWithoutUsersInput[] | shapesUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: shapesCreateOrConnectWithoutUsersInput | shapesCreateOrConnectWithoutUsersInput[]
    createMany?: shapesCreateManyUsersInputEnvelope
    connect?: shapesWhereUniqueInput | shapesWhereUniqueInput[]
  }

  export type waypointsUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<waypointsCreateWithoutUsersInput, waypointsUncheckedCreateWithoutUsersInput> | waypointsCreateWithoutUsersInput[] | waypointsUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: waypointsCreateOrConnectWithoutUsersInput | waypointsCreateOrConnectWithoutUsersInput[]
    createMany?: waypointsCreateManyUsersInputEnvelope
    connect?: waypointsWhereUniqueInput | waypointsWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type linesUpdateManyWithoutUsersNestedInput = {
    create?: XOR<linesCreateWithoutUsersInput, linesUncheckedCreateWithoutUsersInput> | linesCreateWithoutUsersInput[] | linesUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: linesCreateOrConnectWithoutUsersInput | linesCreateOrConnectWithoutUsersInput[]
    upsert?: linesUpsertWithWhereUniqueWithoutUsersInput | linesUpsertWithWhereUniqueWithoutUsersInput[]
    createMany?: linesCreateManyUsersInputEnvelope
    set?: linesWhereUniqueInput | linesWhereUniqueInput[]
    disconnect?: linesWhereUniqueInput | linesWhereUniqueInput[]
    delete?: linesWhereUniqueInput | linesWhereUniqueInput[]
    connect?: linesWhereUniqueInput | linesWhereUniqueInput[]
    update?: linesUpdateWithWhereUniqueWithoutUsersInput | linesUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: linesUpdateManyWithWhereWithoutUsersInput | linesUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: linesScalarWhereInput | linesScalarWhereInput[]
  }

  export type shapesUpdateManyWithoutUsersNestedInput = {
    create?: XOR<shapesCreateWithoutUsersInput, shapesUncheckedCreateWithoutUsersInput> | shapesCreateWithoutUsersInput[] | shapesUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: shapesCreateOrConnectWithoutUsersInput | shapesCreateOrConnectWithoutUsersInput[]
    upsert?: shapesUpsertWithWhereUniqueWithoutUsersInput | shapesUpsertWithWhereUniqueWithoutUsersInput[]
    createMany?: shapesCreateManyUsersInputEnvelope
    set?: shapesWhereUniqueInput | shapesWhereUniqueInput[]
    disconnect?: shapesWhereUniqueInput | shapesWhereUniqueInput[]
    delete?: shapesWhereUniqueInput | shapesWhereUniqueInput[]
    connect?: shapesWhereUniqueInput | shapesWhereUniqueInput[]
    update?: shapesUpdateWithWhereUniqueWithoutUsersInput | shapesUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: shapesUpdateManyWithWhereWithoutUsersInput | shapesUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: shapesScalarWhereInput | shapesScalarWhereInput[]
  }

  export type waypointsUpdateManyWithoutUsersNestedInput = {
    create?: XOR<waypointsCreateWithoutUsersInput, waypointsUncheckedCreateWithoutUsersInput> | waypointsCreateWithoutUsersInput[] | waypointsUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: waypointsCreateOrConnectWithoutUsersInput | waypointsCreateOrConnectWithoutUsersInput[]
    upsert?: waypointsUpsertWithWhereUniqueWithoutUsersInput | waypointsUpsertWithWhereUniqueWithoutUsersInput[]
    createMany?: waypointsCreateManyUsersInputEnvelope
    set?: waypointsWhereUniqueInput | waypointsWhereUniqueInput[]
    disconnect?: waypointsWhereUniqueInput | waypointsWhereUniqueInput[]
    delete?: waypointsWhereUniqueInput | waypointsWhereUniqueInput[]
    connect?: waypointsWhereUniqueInput | waypointsWhereUniqueInput[]
    update?: waypointsUpdateWithWhereUniqueWithoutUsersInput | waypointsUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: waypointsUpdateManyWithWhereWithoutUsersInput | waypointsUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: waypointsScalarWhereInput | waypointsScalarWhereInput[]
  }

  export type linesUncheckedUpdateManyWithoutUsersNestedInput = {
    create?: XOR<linesCreateWithoutUsersInput, linesUncheckedCreateWithoutUsersInput> | linesCreateWithoutUsersInput[] | linesUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: linesCreateOrConnectWithoutUsersInput | linesCreateOrConnectWithoutUsersInput[]
    upsert?: linesUpsertWithWhereUniqueWithoutUsersInput | linesUpsertWithWhereUniqueWithoutUsersInput[]
    createMany?: linesCreateManyUsersInputEnvelope
    set?: linesWhereUniqueInput | linesWhereUniqueInput[]
    disconnect?: linesWhereUniqueInput | linesWhereUniqueInput[]
    delete?: linesWhereUniqueInput | linesWhereUniqueInput[]
    connect?: linesWhereUniqueInput | linesWhereUniqueInput[]
    update?: linesUpdateWithWhereUniqueWithoutUsersInput | linesUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: linesUpdateManyWithWhereWithoutUsersInput | linesUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: linesScalarWhereInput | linesScalarWhereInput[]
  }

  export type shapesUncheckedUpdateManyWithoutUsersNestedInput = {
    create?: XOR<shapesCreateWithoutUsersInput, shapesUncheckedCreateWithoutUsersInput> | shapesCreateWithoutUsersInput[] | shapesUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: shapesCreateOrConnectWithoutUsersInput | shapesCreateOrConnectWithoutUsersInput[]
    upsert?: shapesUpsertWithWhereUniqueWithoutUsersInput | shapesUpsertWithWhereUniqueWithoutUsersInput[]
    createMany?: shapesCreateManyUsersInputEnvelope
    set?: shapesWhereUniqueInput | shapesWhereUniqueInput[]
    disconnect?: shapesWhereUniqueInput | shapesWhereUniqueInput[]
    delete?: shapesWhereUniqueInput | shapesWhereUniqueInput[]
    connect?: shapesWhereUniqueInput | shapesWhereUniqueInput[]
    update?: shapesUpdateWithWhereUniqueWithoutUsersInput | shapesUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: shapesUpdateManyWithWhereWithoutUsersInput | shapesUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: shapesScalarWhereInput | shapesScalarWhereInput[]
  }

  export type waypointsUncheckedUpdateManyWithoutUsersNestedInput = {
    create?: XOR<waypointsCreateWithoutUsersInput, waypointsUncheckedCreateWithoutUsersInput> | waypointsCreateWithoutUsersInput[] | waypointsUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: waypointsCreateOrConnectWithoutUsersInput | waypointsCreateOrConnectWithoutUsersInput[]
    upsert?: waypointsUpsertWithWhereUniqueWithoutUsersInput | waypointsUpsertWithWhereUniqueWithoutUsersInput[]
    createMany?: waypointsCreateManyUsersInputEnvelope
    set?: waypointsWhereUniqueInput | waypointsWhereUniqueInput[]
    disconnect?: waypointsWhereUniqueInput | waypointsWhereUniqueInput[]
    delete?: waypointsWhereUniqueInput | waypointsWhereUniqueInput[]
    connect?: waypointsWhereUniqueInput | waypointsWhereUniqueInput[]
    update?: waypointsUpdateWithWhereUniqueWithoutUsersInput | waypointsUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: waypointsUpdateManyWithWhereWithoutUsersInput | waypointsUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: waypointsScalarWhereInput | waypointsScalarWhereInput[]
  }

  export type usersCreateNestedOneWithoutWaypointsInput = {
    create?: XOR<usersCreateWithoutWaypointsInput, usersUncheckedCreateWithoutWaypointsInput>
    connectOrCreate?: usersCreateOrConnectWithoutWaypointsInput
    connect?: usersWhereUniqueInput
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type usersUpdateOneRequiredWithoutWaypointsNestedInput = {
    create?: XOR<usersCreateWithoutWaypointsInput, usersUncheckedCreateWithoutWaypointsInput>
    connectOrCreate?: usersCreateOrConnectWithoutWaypointsInput
    upsert?: usersUpsertWithoutWaypointsInput
    connect?: usersWhereUniqueInput
    update?: XOR<XOR<usersUpdateToOneWithWhereWithoutWaypointsInput, usersUpdateWithoutWaypointsInput>, usersUncheckedUpdateWithoutWaypointsInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type usersCreateNestedOneWithoutLinesInput = {
    create?: XOR<usersCreateWithoutLinesInput, usersUncheckedCreateWithoutLinesInput>
    connectOrCreate?: usersCreateOrConnectWithoutLinesInput
    connect?: usersWhereUniqueInput
  }

  export type usersUpdateOneRequiredWithoutLinesNestedInput = {
    create?: XOR<usersCreateWithoutLinesInput, usersUncheckedCreateWithoutLinesInput>
    connectOrCreate?: usersCreateOrConnectWithoutLinesInput
    upsert?: usersUpsertWithoutLinesInput
    connect?: usersWhereUniqueInput
    update?: XOR<XOR<usersUpdateToOneWithWhereWithoutLinesInput, usersUpdateWithoutLinesInput>, usersUncheckedUpdateWithoutLinesInput>
  }

  export type usersCreateNestedOneWithoutShapesInput = {
    create?: XOR<usersCreateWithoutShapesInput, usersUncheckedCreateWithoutShapesInput>
    connectOrCreate?: usersCreateOrConnectWithoutShapesInput
    connect?: usersWhereUniqueInput
  }

  export type usersUpdateOneRequiredWithoutShapesNestedInput = {
    create?: XOR<usersCreateWithoutShapesInput, usersUncheckedCreateWithoutShapesInput>
    connectOrCreate?: usersCreateOrConnectWithoutShapesInput
    upsert?: usersUpsertWithoutShapesInput
    connect?: usersWhereUniqueInput
    update?: XOR<XOR<usersUpdateToOneWithWhereWithoutShapesInput, usersUpdateWithoutShapesInput>, usersUncheckedUpdateWithoutShapesInput>
  }

  export type NestedUuidFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedUuidFilter<$PrismaModel> | string
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedUuidWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedUuidWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type linesCreateWithoutUsersInput = {
    name?: string | null
    description?: string | null
    created_at?: Date | string | null
  }

  export type linesUncheckedCreateWithoutUsersInput = {
    id?: number
    name?: string | null
    description?: string | null
    created_at?: Date | string | null
  }

  export type linesCreateOrConnectWithoutUsersInput = {
    where: linesWhereUniqueInput
    create: XOR<linesCreateWithoutUsersInput, linesUncheckedCreateWithoutUsersInput>
  }

  export type linesCreateManyUsersInputEnvelope = {
    data: linesCreateManyUsersInput | linesCreateManyUsersInput[]
    skipDuplicates?: boolean
  }

  export type shapesCreateWithoutUsersInput = {
    name?: string | null
    description?: string | null
    created_at?: Date | string | null
  }

  export type shapesUncheckedCreateWithoutUsersInput = {
    id?: number
    name?: string | null
    description?: string | null
    created_at?: Date | string | null
  }

  export type shapesCreateOrConnectWithoutUsersInput = {
    where: shapesWhereUniqueInput
    create: XOR<shapesCreateWithoutUsersInput, shapesUncheckedCreateWithoutUsersInput>
  }

  export type shapesCreateManyUsersInputEnvelope = {
    data: shapesCreateManyUsersInput | shapesCreateManyUsersInput[]
    skipDuplicates?: boolean
  }

  export type waypointsCreateWithoutUsersInput = {
    name?: string | null
    description?: string | null
    created_at?: Date | string | null
  }

  export type waypointsUncheckedCreateWithoutUsersInput = {
    id?: number
    name?: string | null
    description?: string | null
    created_at?: Date | string | null
  }

  export type waypointsCreateOrConnectWithoutUsersInput = {
    where: waypointsWhereUniqueInput
    create: XOR<waypointsCreateWithoutUsersInput, waypointsUncheckedCreateWithoutUsersInput>
  }

  export type waypointsCreateManyUsersInputEnvelope = {
    data: waypointsCreateManyUsersInput | waypointsCreateManyUsersInput[]
    skipDuplicates?: boolean
  }

  export type linesUpsertWithWhereUniqueWithoutUsersInput = {
    where: linesWhereUniqueInput
    update: XOR<linesUpdateWithoutUsersInput, linesUncheckedUpdateWithoutUsersInput>
    create: XOR<linesCreateWithoutUsersInput, linesUncheckedCreateWithoutUsersInput>
  }

  export type linesUpdateWithWhereUniqueWithoutUsersInput = {
    where: linesWhereUniqueInput
    data: XOR<linesUpdateWithoutUsersInput, linesUncheckedUpdateWithoutUsersInput>
  }

  export type linesUpdateManyWithWhereWithoutUsersInput = {
    where: linesScalarWhereInput
    data: XOR<linesUpdateManyMutationInput, linesUncheckedUpdateManyWithoutUsersInput>
  }

  export type linesScalarWhereInput = {
    AND?: linesScalarWhereInput | linesScalarWhereInput[]
    OR?: linesScalarWhereInput[]
    NOT?: linesScalarWhereInput | linesScalarWhereInput[]
    id?: IntFilter<"lines"> | number
    user_id?: UuidFilter<"lines"> | string
    name?: StringNullableFilter<"lines"> | string | null
    description?: StringNullableFilter<"lines"> | string | null
    created_at?: DateTimeNullableFilter<"lines"> | Date | string | null
  }

  export type shapesUpsertWithWhereUniqueWithoutUsersInput = {
    where: shapesWhereUniqueInput
    update: XOR<shapesUpdateWithoutUsersInput, shapesUncheckedUpdateWithoutUsersInput>
    create: XOR<shapesCreateWithoutUsersInput, shapesUncheckedCreateWithoutUsersInput>
  }

  export type shapesUpdateWithWhereUniqueWithoutUsersInput = {
    where: shapesWhereUniqueInput
    data: XOR<shapesUpdateWithoutUsersInput, shapesUncheckedUpdateWithoutUsersInput>
  }

  export type shapesUpdateManyWithWhereWithoutUsersInput = {
    where: shapesScalarWhereInput
    data: XOR<shapesUpdateManyMutationInput, shapesUncheckedUpdateManyWithoutUsersInput>
  }

  export type shapesScalarWhereInput = {
    AND?: shapesScalarWhereInput | shapesScalarWhereInput[]
    OR?: shapesScalarWhereInput[]
    NOT?: shapesScalarWhereInput | shapesScalarWhereInput[]
    id?: IntFilter<"shapes"> | number
    user_id?: UuidFilter<"shapes"> | string
    name?: StringNullableFilter<"shapes"> | string | null
    description?: StringNullableFilter<"shapes"> | string | null
    created_at?: DateTimeNullableFilter<"shapes"> | Date | string | null
  }

  export type waypointsUpsertWithWhereUniqueWithoutUsersInput = {
    where: waypointsWhereUniqueInput
    update: XOR<waypointsUpdateWithoutUsersInput, waypointsUncheckedUpdateWithoutUsersInput>
    create: XOR<waypointsCreateWithoutUsersInput, waypointsUncheckedCreateWithoutUsersInput>
  }

  export type waypointsUpdateWithWhereUniqueWithoutUsersInput = {
    where: waypointsWhereUniqueInput
    data: XOR<waypointsUpdateWithoutUsersInput, waypointsUncheckedUpdateWithoutUsersInput>
  }

  export type waypointsUpdateManyWithWhereWithoutUsersInput = {
    where: waypointsScalarWhereInput
    data: XOR<waypointsUpdateManyMutationInput, waypointsUncheckedUpdateManyWithoutUsersInput>
  }

  export type waypointsScalarWhereInput = {
    AND?: waypointsScalarWhereInput | waypointsScalarWhereInput[]
    OR?: waypointsScalarWhereInput[]
    NOT?: waypointsScalarWhereInput | waypointsScalarWhereInput[]
    id?: IntFilter<"waypoints"> | number
    user_id?: UuidFilter<"waypoints"> | string
    name?: StringNullableFilter<"waypoints"> | string | null
    description?: StringNullableFilter<"waypoints"> | string | null
    created_at?: DateTimeNullableFilter<"waypoints"> | Date | string | null
  }

  export type usersCreateWithoutWaypointsInput = {
    id?: string
    username: string
    created_at?: Date | string | null
    lines?: linesCreateNestedManyWithoutUsersInput
    shapes?: shapesCreateNestedManyWithoutUsersInput
  }

  export type usersUncheckedCreateWithoutWaypointsInput = {
    id?: string
    username: string
    created_at?: Date | string | null
    lines?: linesUncheckedCreateNestedManyWithoutUsersInput
    shapes?: shapesUncheckedCreateNestedManyWithoutUsersInput
  }

  export type usersCreateOrConnectWithoutWaypointsInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutWaypointsInput, usersUncheckedCreateWithoutWaypointsInput>
  }

  export type usersUpsertWithoutWaypointsInput = {
    update: XOR<usersUpdateWithoutWaypointsInput, usersUncheckedUpdateWithoutWaypointsInput>
    create: XOR<usersCreateWithoutWaypointsInput, usersUncheckedCreateWithoutWaypointsInput>
    where?: usersWhereInput
  }

  export type usersUpdateToOneWithWhereWithoutWaypointsInput = {
    where?: usersWhereInput
    data: XOR<usersUpdateWithoutWaypointsInput, usersUncheckedUpdateWithoutWaypointsInput>
  }

  export type usersUpdateWithoutWaypointsInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lines?: linesUpdateManyWithoutUsersNestedInput
    shapes?: shapesUpdateManyWithoutUsersNestedInput
  }

  export type usersUncheckedUpdateWithoutWaypointsInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lines?: linesUncheckedUpdateManyWithoutUsersNestedInput
    shapes?: shapesUncheckedUpdateManyWithoutUsersNestedInput
  }

  export type usersCreateWithoutLinesInput = {
    id?: string
    username: string
    created_at?: Date | string | null
    shapes?: shapesCreateNestedManyWithoutUsersInput
    waypoints?: waypointsCreateNestedManyWithoutUsersInput
  }

  export type usersUncheckedCreateWithoutLinesInput = {
    id?: string
    username: string
    created_at?: Date | string | null
    shapes?: shapesUncheckedCreateNestedManyWithoutUsersInput
    waypoints?: waypointsUncheckedCreateNestedManyWithoutUsersInput
  }

  export type usersCreateOrConnectWithoutLinesInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutLinesInput, usersUncheckedCreateWithoutLinesInput>
  }

  export type usersUpsertWithoutLinesInput = {
    update: XOR<usersUpdateWithoutLinesInput, usersUncheckedUpdateWithoutLinesInput>
    create: XOR<usersCreateWithoutLinesInput, usersUncheckedCreateWithoutLinesInput>
    where?: usersWhereInput
  }

  export type usersUpdateToOneWithWhereWithoutLinesInput = {
    where?: usersWhereInput
    data: XOR<usersUpdateWithoutLinesInput, usersUncheckedUpdateWithoutLinesInput>
  }

  export type usersUpdateWithoutLinesInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    shapes?: shapesUpdateManyWithoutUsersNestedInput
    waypoints?: waypointsUpdateManyWithoutUsersNestedInput
  }

  export type usersUncheckedUpdateWithoutLinesInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    shapes?: shapesUncheckedUpdateManyWithoutUsersNestedInput
    waypoints?: waypointsUncheckedUpdateManyWithoutUsersNestedInput
  }

  export type usersCreateWithoutShapesInput = {
    id?: string
    username: string
    created_at?: Date | string | null
    lines?: linesCreateNestedManyWithoutUsersInput
    waypoints?: waypointsCreateNestedManyWithoutUsersInput
  }

  export type usersUncheckedCreateWithoutShapesInput = {
    id?: string
    username: string
    created_at?: Date | string | null
    lines?: linesUncheckedCreateNestedManyWithoutUsersInput
    waypoints?: waypointsUncheckedCreateNestedManyWithoutUsersInput
  }

  export type usersCreateOrConnectWithoutShapesInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutShapesInput, usersUncheckedCreateWithoutShapesInput>
  }

  export type usersUpsertWithoutShapesInput = {
    update: XOR<usersUpdateWithoutShapesInput, usersUncheckedUpdateWithoutShapesInput>
    create: XOR<usersCreateWithoutShapesInput, usersUncheckedCreateWithoutShapesInput>
    where?: usersWhereInput
  }

  export type usersUpdateToOneWithWhereWithoutShapesInput = {
    where?: usersWhereInput
    data: XOR<usersUpdateWithoutShapesInput, usersUncheckedUpdateWithoutShapesInput>
  }

  export type usersUpdateWithoutShapesInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lines?: linesUpdateManyWithoutUsersNestedInput
    waypoints?: waypointsUpdateManyWithoutUsersNestedInput
  }

  export type usersUncheckedUpdateWithoutShapesInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lines?: linesUncheckedUpdateManyWithoutUsersNestedInput
    waypoints?: waypointsUncheckedUpdateManyWithoutUsersNestedInput
  }

  export type linesCreateManyUsersInput = {
    id?: number
    name?: string | null
    description?: string | null
    created_at?: Date | string | null
  }

  export type shapesCreateManyUsersInput = {
    id?: number
    name?: string | null
    description?: string | null
    created_at?: Date | string | null
  }

  export type waypointsCreateManyUsersInput = {
    id?: number
    name?: string | null
    description?: string | null
    created_at?: Date | string | null
  }

  export type linesUpdateWithoutUsersInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type linesUncheckedUpdateWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type linesUncheckedUpdateManyWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type shapesUpdateWithoutUsersInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type shapesUncheckedUpdateWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type shapesUncheckedUpdateManyWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type waypointsUpdateWithoutUsersInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type waypointsUncheckedUpdateWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type waypointsUncheckedUpdateManyWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}